{
    "archive_path": "archive/1632851441.89175",
    "base_url": "en.wikipedia.org/wiki/APL_(programming_language)",
    "basename": "APL_(programming_language)",
    "bookmarked_date": "2021-09-28 17:50",
    "canonical": {
        "archive_org_path": "https://web.archive.org/web/en.wikipedia.org/wiki/APL_(programming_language)",
        "dom_path": "output.html",
        "favicon_path": "favicon.ico",
        "git_path": "git/",
        "google_favicon_path": "https://www.google.com/s2/favicons?domain=en.wikipedia.org",
        "headers_path": "headers.json",
        "index_path": "index.html",
        "media_path": "media/",
        "mercury_path": "mercury/content.html",
        "pdf_path": "output.pdf",
        "readability_path": "readability/content.html",
        "screenshot_path": "screenshot.png",
        "singlefile_path": "singlefile.html",
        "warc_path": "warc/",
        "wget_path": null
    },
    "domain": "en.wikipedia.org",
    "extension": "",
    "hash": "CZ8Q5QJXCTA8V23BTJRB",
    "history": {
        "archive_org": [
            {
                "cmd": [
                    "curl",
                    "--silent",
                    "--location",
                    "--compressed",
                    "--head",
                    "--max-time",
                    "90",
                    "--user-agent",
                    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/0.6.2 (+https://github.com/ArchiveBox/ArchiveBox/) curl/curl 7.76.1 (x86_64-pc-linux-gnu)",
                    "https://web.archive.org/save/https://en.wikipedia.org/wiki/APL_(programming_language)"
                ],
                "cmd_version": "curl 7.76.1 (x86_64-pc-linux-gnu)",
                "end_ts": "2021-09-28T17:51:08.230988+00:00",
                "index_texts": null,
                "output": "https://web.archive.org/web/20210928175102/https://en.wikipedia.org/wiki/APL_%28programming_language%29",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632851441.89175",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-28T17:51:00.765671+00:00",
                "status": "succeeded"
            }
        ],
        "dom": [
            {
                "cmd": [
                    "chromium-browser",
                    "--headless",
                    "--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/{VERSION} (+https://github.com/ArchiveBox/ArchiveBox/)",
                    "--window-size=1440,2000",
                    "--timeout=90000",
                    "--dump-dom",
                    "https://en.wikipedia.org/wiki/APL_(programming_language)"
                ],
                "cmd_version": "Chromium 93.0.4577.82",
                "end_ts": "2021-09-28T17:50:53.092367+00:00",
                "index_texts": null,
                "output": "output.html",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632851441.89175",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-28T17:50:52.163969+00:00",
                "status": "succeeded"
            }
        ],
        "favicon": [
            {
                "cmd": [
                    "curl",
                    "--silent",
                    "--location",
                    "--compressed",
                    "--max-time",
                    "90",
                    "--output",
                    "favicon.ico",
                    "--user-agent",
                    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/0.6.2 (+https://github.com/ArchiveBox/ArchiveBox/) curl/curl 7.76.1 (x86_64-pc-linux-gnu)",
                    "https://www.google.com/s2/favicons?domain=en.wikipedia.org"
                ],
                "cmd_version": "curl 7.76.1 (x86_64-pc-linux-gnu)",
                "end_ts": "2021-09-28T17:50:42.676560+00:00",
                "index_texts": null,
                "output": "favicon.ico",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632851441.89175",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-28T17:50:42.573544+00:00",
                "status": "succeeded"
            }
        ],
        "git": [],
        "headers": [
            {
                "cmd": [
                    "curl",
                    "--silent",
                    "--location",
                    "--compressed",
                    "--head",
                    "--max-time",
                    "90",
                    "--user-agent",
                    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/0.6.2 (+https://github.com/ArchiveBox/ArchiveBox/) curl/curl 7.76.1 (x86_64-pc-linux-gnu)",
                    "https://en.wikipedia.org/wiki/APL_(programming_language)"
                ],
                "cmd_version": "curl 7.76.1 (x86_64-pc-linux-gnu)",
                "end_ts": "2021-09-28T17:50:42.833615+00:00",
                "index_texts": null,
                "output": "headers.json",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632851441.89175",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-28T17:50:42.698749+00:00",
                "status": "succeeded"
            }
        ],
        "media": [],
        "mercury": [
            {
                "cmd": [
                    "/home/wesleyac/code/notebook/data/archivebox/node_modules/@postlight/mercury-parser/cli.js",
                    "https://en.wikipedia.org/wiki/APL_(programming_language)"
                ],
                "cmd_version": "1.0.0",
                "end_ts": "2021-09-28T17:51:00.747404+00:00",
                "index_texts": null,
                "output": "mercury",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632851441.89175",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-28T17:50:56.368677+00:00",
                "status": "succeeded"
            }
        ],
        "pdf": [],
        "readability": [
            {
                "cmd": [
                    "/home/wesleyac/code/notebook/data/archivebox/node_modules/readability-extractor/readability-extractor",
                    "/run/user/1000/tmpkxje9v12"
                ],
                "cmd_version": "0.0.3",
                "end_ts": "2021-09-28T17:50:56.354833+00:00",
                "index_texts": [
                    "\n\nAPLParadigmArray, functional, structured, modularDesigned\u00a0byKenneth E. IversonDeveloperLarry Breed, Dick Lathwell, Roger Moore and othersFirst\u00a0appearedNovember\u00a027, 1966; 54 years ago[1]Stable releaseISO/IEC 13751:2001\n   / February\u00a01, 2001; 20 years agoTyping disciplineDynamicPlatformCross platformLicenseProprietary, open sourceMajor implementations\nAPL\\360\nAPL\\1130\nAPL*Plus\nSharp APL\nAPL2\nDyalog APL\nNARS2000\nAPLX\nGNU APL\nInfluenced byMathematical notationInfluenced\nA and A+\nC++[2]\nFP\nJ\nK\nLYaPAS[citation needed]\nMATLAB\nNial\nPPL\nPython\nS\nSpeakeasy\nWolfram Language\n\n\nAPL (named after the book A Programming Language)[3] is a programming language developed in the 1960s by Kenneth E. Iverson. Its central datatype is the multidimensional array. It uses a large range of special graphic symbols[4] to represent most functions and operators, leading to very concise code. It has been an important influence on the development of concept modeling, spreadsheets, functional programming,[5] and computer math packages.[6] It has also inspired several other programming languages.[7][8]\n\n\n\nHistory[edit]\nMathematical notation[edit]\nA mathematical notation for manipulating arrays was developed by Kenneth E. Iverson, starting in 1957 at Harvard University. In 1960, he began work for IBM where he developed this notation with Adin Falkoff and published it in his book A Programming Language in 1962.[3] The preface states its premise:\n\nApplied mathematics is largely concerned with the design and analysis of explicit procedures for calculating the exact or approximate values of various functions. Such explicit procedures are called algorithms or programs. Because an effective notation for the description of programs exhibits considerable syntactic structure, it is called a programming language.\n\nThis notation was used inside IBM for short research reports on computer systems, such as the Burroughs B5000 and its stack mechanism when stack machines versus register machines were being evaluated by IBM for upcoming computers.\nIverson also used his notation in a draft of the chapter A Programming Language, written for a book he was writing with Fred Brooks, Automatic Data Processing, which would be published in 1963.[9][10]\nIn 1979, Iverson received the Turing Award for his work on APL.[11]\n\nDevelopment into a computer programming language[edit]\nAs early as 1962, the first attempt to use the notation to describe a complete computer system happened after Falkoff discussed with William C. Carter his work to standardize the instruction set for the machines that later became the IBM System/360 family.\nIn 1963, Herbert Hellerman, working at the IBM Systems Research Institute, implemented a part of the notation on an IBM 1620 computer, and it was used by students in a special high school course on calculating transcendental functions by series summation. Students tested their code in Hellerman's lab. This implementation of a part of the notation was called Personalized Array Translator (PAT).[12]\nIn 1963, Falkoff, Iverson, and Edward H. Sussenguth Jr., all working at IBM, used the notation for a formal description of the IBM System/360 series machine architecture and functionality, which resulted in a paper published in IBM Systems Journal in 1964. After this was published, the team turned their attention to an implementation of the notation on a computer system. One of the motivations for this focus of implementation was the interest of John L. Lawrence who had new duties with Science Research Associates, an educational company bought by IBM in 1964. Lawrence asked Iverson and his group to help use the language as a tool to develop and use computers in education.[13]\nAfter Lawrence M. Breed and Philip S. Abrams of Stanford University joined the team at IBM Research, they continued their prior work on an implementation programmed in FORTRAN IV for a part of the notation which had been done for the IBM 7090 computer running on the IBSYS operating system. This work was finished in late 1965 and later named IVSYS (for Iverson system). The basis of this implementation was described in detail by Abrams in a Stanford University Technical Report, \"An Interpreter for Iverson Notation\" in 1966, the academic aspect of this was formally supervised by Niklaus Wirth.[14] Like Hellerman's PAT system earlier, this implementation did not include the APL character set but used special English reserved words for functions and operators. The system was later adapted for a time-sharing system and, by November 1966, it had been reprogrammed for the IBM System/360 Model 50 computer running in a time sharing mode and was used internally at IBM.[15]\n\nHardware[edit]\nIBM typeballs and typewheel containing APL Greek characters.\nA programmer's view of the IBM 2741 keyboard layout with the APL typing element print head inserted\nA key development in the ability to use APL effectively, before the wide use of cathode ray tube (CRT) terminals, was the development of a special IBM Selectric typewriter interchangeable typing element with all the special APL characters on it. This was used on paper printing terminal workstations using the Selectric typewriter and typing element mechanism, such as the IBM 1050 and IBM 2741 terminal. Keycaps could be placed over the normal keys to show which APL characters would be entered and typed when that key was struck. For the first time, a programmer could type in and see proper APL characters as used in Iverson's notation and not be forced to use awkward English keyword representations of them. Falkoff and Iverson had the special APL Selectric typing elements, 987 and 988, designed in late 1964, although no APL computer system was available to use them.[16] Iverson cited Falkoff as the inspiration for the idea of using an IBM Selectric typing element for the APL character set.[17]\nMany APL symbols, even with the APL characters on the Selectric typing element, still had to be typed in by over-striking two extant element characters. An example is the grade up character, which had to be made from a delta (shift-H) and a Sheffer stroke (shift-M). This was necessary because the APL character set was much larger than the 88 characters allowed on the typing element, even when letters were restricted to upper-case (capitals).\n\nCommercial availability[edit]\nThe first APL interactive login and creation of an APL workspace was in 1966 by Larry Breed using an IBM 1050 terminal at the IBM Mohansic Labs near Thomas J. Watson Research Center, the home of APL, in Yorktown Heights, New York.[16]\nIBM was chiefly responsible for introducing APL to the marketplace. APL was first available in 1967 for the IBM 1130 as APL\\1130.[18][19] It would run in as little as 8k 16-bit words of memory, and used a dedicated 1 megabyte hard disk.\nAPL gained its foothold on mainframe timesharing systems from the late 1960s through the early 1980s, in part because it would support multiple users on lower-specification systems that had no dynamic address translation hardware.[20] Additional improvements in performance for selected IBM System/370 mainframe systems included the APL Assist Microcode in which some support for APL execution was included in the processor's firmware, as distinct from being implemented entirely by higher-level software. Somewhat later, as suitably performing hardware was finally growing available in the mid- to late-1980s, many users migrated their applications to the personal computer environment.\nEarly IBM APL interpreters for IBM 360 and IBM 370 hardware implemented their own multi-user management instead of relying on the host services, thus they were their own timesharing systems. First introduced in 1966, the APL\\360[21][22][23] system was a multi-user interpreter. The ability to programmatically communicate with the operating system for information and setting interpreter system variables was done through special privileged \"I-beam\" functions, using both monadic and dyadic operations.[24]\nIn 1973, IBM released APL.SV, which was a continuation of the same product, but which offered shared variables as a means to access facilities outside of the APL system, such as operating system files. In the mid-1970s, the IBM mainframe interpreter was even adapted for use on the IBM 5100 desktop computer, which had a small CRT and an APL keyboard, when most other small computers of the time only offered BASIC. In the 1980s, the VSAPL program product enjoyed wide use with Conversational Monitor System (CMS), Time Sharing Option (TSO), VSPC, MUSIC/SP, and CICS users.\nIn 1973\u20131974, Patrick E. Hagerty directed the implementation of the University of Maryland APL interpreter for the 1100 line of the Sperry UNIVAC 1100/2200 series mainframe computers.[25] At the time, Sperry had nothing. In 1974, student Alan Stebbens was assigned the task of implementing an internal function.[26] Xerox APL was available from June 1975 for Xerox 560 and Sigma 6, 7, and 9 mainframes running CP-V and for Honeywell CP-6.[27]\nIn the 1960s and 1970s, several timesharing firms arose that sold APL services using modified versions of the IBM APL\\360[23] interpreter. In North America, the better-known ones were I. P. Sharp Associates, Scientific Time Sharing Corporation (STSC), Time Sharing Resources (TSR), and The Computer Company (TCC). CompuServe also entered the market in 1978 with an APL Interpreter based on a modified version of Digital Equipment Corp and Carnegie Mellon's, which ran on DEC's KI and KL 36-bit machines. CompuServe's APL was available both to its commercial market and the consumer information service. With the advent first of less expensive mainframes such as the IBM 4300, and later the personal computer, by the mid-1980s, the timesharing industry was all but gone.\nSharp APL was available from I. P. Sharp Associates, first as a timesharing service in the 1960s, and later as a program product starting around 1979. Sharp APL was an advanced APL implementation with many language extensions, such as packages (the ability to put one or more objects into a single variable), file system, nested arrays, and shared variables.\nAPL interpreters were available from other mainframe and mini-computer manufacturers also, notably Burroughs, Control Data Corporation (CDC), Data General, Digital Equipment Corporation (DEC), Harris, Hewlett-Packard (HP), Siemens AG, Xerox, and others.\nGarth Foster of Syracuse University sponsored regular meetings of the APL implementers' community at Syracuse's Minnowbrook Conference Center in Blue Mountain Lake, New York. In later years, Eugene McDonnell organized similar meetings at the Asilomar Conference Grounds near Monterey, California, and at Pajaro Dunes near Watsonville, California. The SIGAPL special interest group of the Association for Computing Machinery continues to support the APL community.[28]\n\nMicrocomputers[edit]\nOn microcomputers, which became available from the mid 1970s onwards, BASIC became the dominant programming language.[29] Nevertheless, some microcomputers provided APL instead - the first being the Intel 8008-based MCM/70 which was released in 1974[30][31] and which was primarily used in education.[32] Another machine of this time was the VideoBrain Family Computer, released in 1977, which was supplied with its dialect of APL called APL/S.[33]\nThe Commodore SuperPET, introduced in 1981, included an APL interpreter developed by the University of Waterloo.[34]\nIn 1976, Bill Gates claimed in his Open Letter to Hobbyists that Microsoft Corporation was implementing APL for the Intel 8080 and Motorola 6800 but had \"very little incentive to make [it] available to hobbyists\" because of software piracy.[35] It was never released.\n\nAPL2[edit]\nStarting in the early 1980s, IBM APL development, under the leadership of Jim Brown, implemented a new version of the APL language that contained as its primary enhancement the concept of nested arrays, where an array can contain other arrays, and new language features which facilitated integrating nested arrays into program workflow. Ken Iverson, no longer in control of the development of the APL language, left IBM and joined I. P. Sharp Associates, where one of his major contributions was directing the evolution of Sharp APL to be more in accord with his vision.[36][37][38]\nAs other vendors were busy developing APL interpreters for new hardware, notably Unix-based microcomputers, APL2 was almost always the standard chosen for new APL interpreter developments. Even today, most APL vendors or their users cite APL2 compatibility, as a selling point for those products.[39][40]\nAPL2 for IBM mainframe computers is still available. IBM cites its use for problem solving, system design, prototyping, engineering and scientific computations, expert systems,[41] for teaching mathematics and other subjects, visualization and database access[42] and was first available for CMS and TSO in 1984.[43] The APL2 Workstation edition (Windows, OS/2, AIX, Linux, and Solaris) followed much later in the early 1990s.[citation needed]\n\nModern implementations[edit]\nVarious implementations of APL by APLX, Dyalog, et al., include extensions for object-oriented programming, support for .NET Framework, XML-array conversion primitives, graphing, operating system interfaces, and lambda calculus expressions.\n\nDerivative languages[edit]\nAPL has formed the basis of, or influenced, the following languages:[citation needed]\n\nA and A+, an alternative APL, the latter with graphical extensions.\nFP, a functional programming language.\nIvy, an interpreter for an APL-like language developed by Rob Pike, and which uses ASCII as input.[44]\nJ, which was also designed by Iverson, and which uses ASCII with digraphs instead of special symbols.[7]\nK, a proprietary variant of APL developed by Arthur Whitney.[8]\nLYaPAS, a Soviet extension to APL.[citation needed]\nMATLAB, a numerical computation tool.[6]\nNial, a high-level array programming language with a functional programming notation.\nPolymorphic Programming Language, an interactive, extensible language with a similar base language.\nS, a statistical programming language (usually now seen in the open-source version known as R).\nSpeakeasy, a numerical computing interactive environment.\nWolfram Language, the programming language of Mathematica.[45]\nLanguage characteristics[edit]\nCharacter set[edit]\n\nAPL has been both criticized and praised for its choice of a unique, non-standard character set. Some who learn it become ardent adherents, suggesting that there is some weight behind Iverson's idea that the notation used does make a difference. In the 1960s and 1970s, few terminal devices and even display monitors could reproduce the APL character set. The most popular ones employed the IBM Selectric print mechanism used with a special APL type element. One of the early APL line terminals (line-mode operation only, not full screen) was the Texas Instruments TI Model 745 (circa 1977) with the full APL character set[46] which featured half and full duplex telecommunications modes, for interacting with an APL time-sharing service or remote mainframe to run a remote computer job, called an RJE.\nOver time, with the universal use of high-quality graphic displays, printing devices and Unicode support, the APL character font problem has largely been eliminated. However, entering APL characters requires the use of input method editors, keyboard mappings, virtual/on-screen APL symbol sets,[47][48] or easy-reference printed keyboard cards which can frustrate beginners accustomed to other programming languages.[49][50][51] With beginners who have no prior experience with other programming languages, a study involving high school students found that typing and using APL characters did not hinder the students in any measurable way.[52]\nIn defense of APL use, APL requires less coding to type in, and keyboard mappings become memorized over time. Also, special APL keyboards are manufactured and in use today, as are freely available downloadable fonts for operating systems such as Microsoft Windows.[53] The reported productivity gains assume that one will spend enough time working in APL to make it worthwhile to memorize the symbols, their semantics, and keyboard mappings, not to mention a substantial number of idioms for common tasks.[citation needed]\n\nDesign[edit]\nUnlike traditionally structured programming languages, APL code is typically structured as chains of monadic or dyadic functions, and operators[54] acting on arrays.[55] APL has many nonstandard primitives (functions and operators) that are indicated by a single symbol or a combination of a few symbols. All primitives are defined to have the same precedence, and always associate to the right. Thus, APL is read or best understood from right-to-left.\nEarly APL implementations (circa 1970 or so) had no programming loop-flow control structures, such as do or while loops, and if-then-else constructs. Instead, they used array operations, and use of structured programming constructs was often not necessary, since an operation could be performed on a full array in one statement. For example, the iota function (\u03b9) can replace for-loop iteration: \u03b9N when applied to a scalar positive integer yields a one-dimensional array (vector), 1 2 3 ... N. More recent implementations of APL generally include comprehensive control structures, so that data structure and program control flow can be clearly and cleanly separated.\nThe APL environment is called a workspace. In a workspace the user can define programs and data, i.e., the data values exist also outside the programs, and the user can also manipulate the data without having to define a program.[56] In the examples below, the APL interpreter first types six spaces before awaiting the user's input. Its own output starts in column one.\n\n\n\n\n\n\nAssigns vector of values, {4 5 6 7}, to variable n, an array create operation. An equivalent yet more concise APL expression would be n \u2190 3 + \u23734. Multiple values are stored in array n, the operation performed without formal loops or control flow language.\n\n\n\n\nDisplay the contents of n, currently an array or vector.\n\n\n\n\n4 is now added to all elements of vector n, creating a 4-element vector {8 9 10 11}. As above, APL's interpreter displays the result because the expression's value was not assigned to a variable (with a \u2190).\n\n\n\n\nAPL displays the sum of components of the vector n, i.e., 22 (= 4 + 5 + 6 + 7) using a very compact notation: read +/ as \"plus, over...\" and a slight change would be \"multiply, over...\"\n\n\n\n\nThese operations can be combined into one statement, remembering that APL evaluates expressions right to left: first \u23734 creates an array, [1,2,3,4], then 3 is added to each component, which are summed together and the result stored in variable m, finally displayed.\nIn normal mathematical notation, it is equivalent to: . Recall that mathematical expressions are not read or evaluated from right-to-left.\n\n\nThe user can save the workspace with all values, programs, and execution status.\nAPL uses a set of non-ASCII symbols, which are an extension of traditional arithmetic and algebraic notation. Having single character names for single instruction, multiple data (SIMD) vector functions is one way that APL enables compact formulation of algorithms for data transformation such as computing Conway's Game of Life in one line of code.[57] In nearly all versions of APL, it is theoretically possible to express any computable function in one expression, that is, in one line of code.[citation needed]\nBecause of the unusual character set, many programmers use special keyboards with APL keytops to write APL code.[58] Although there are various ways to write APL code using only ASCII characters,[59] in practice it is almost never done. (This may be thought to support Iverson's thesis about notation as a tool of thought.[60]) Most if not all modern implementations use standard keyboard layouts, with special mappings or input method editors to access non-ASCII characters. Historically, the APL font has been distinctive, with uppercase italic alphabetic characters and upright numerals and symbols. Most vendors continue to display the APL character set in a custom font.\nAdvocates of APL[who?] claim that the examples of so-called write-only code (badly written and almost incomprehensible code) are almost invariably examples of poor programming practice or novice mistakes, which can occur in any language. Advocates also claim that they are far more productive with APL than with more conventional computer languages, and that working software can be implemented in far less time and with far fewer programmers than using other technology.[citation needed]\nThey also may claim that because it is compact and terse, APL lends itself well to larger-scale software development and complexity, because the number of lines of code can be reduced greatly. Many APL advocates and practitioners also view standard programming languages such as COBOL and Java as being comparatively tedious. APL is often found where time-to-market is important, such as with trading systems.[61][62][63][64]\n\nTerminology[edit]\nAPL makes a clear distinction between functions and operators.[54][65] Functions take arrays (variables or constants or expressions) as arguments, and return arrays as results. Operators (similar to higher-order functions) take functions or arrays as arguments, and derive related functions. For example, the sum function is derived by applying the reduction operator to the addition function. Applying the same reduction operator to the maximum function (which returns the larger of two numbers) derives a function which returns the largest of a group (vector) of numbers. In the J language, Iverson substituted the terms verb for function and adverb or conjunction for operator.\nAPL also identifies those features built into the language, and represented by a symbol, or a fixed combination of symbols, as primitives. Most primitives are either functions or operators. Coding APL is largely a process of writing non-primitive functions and (in some versions of APL) operators. However a few primitives are considered to be neither functions nor operators, most noticeably assignment.\nSome words used in APL literature have meanings that differ from those in both mathematics and the generality of computer science.\n\n\nTerminology of APL operators\n\n\nTerm\n\nDescription\n\n\nfunction\n\noperation or mapping that takes zero, one (right) or two (left & right) arguments which may be scalars, arrays, or more complicated structures, and may return a similarly complex result. A function may be:\nPrimitive: built-in and represented by a single glyph;[66]\nDefined: as a named and ordered collection of program statements;[66]\nDerived: as a combination of an operator with its arguments.[66]\n\n\narray\n\ndata valued object of zero or more orthogonal dimensions in row-major order in which each item is a primitive scalar datum or another array.[67]\n\n\nniladic\n\nnot taking or requiring any arguments, nullary[68]\n\n\nmonadic\n\nrequiring only one argument; on the right for a function, on the left for an operator, unary[68]\n\n\ndyadic\n\nrequiring both a left and a right argument, binary[68]\n\n\nambivalent or monadic\n\ncapable of use in a monadic or dyadic context, permitting its left argument to be elided[66]\n\n\noperator\n\noperation or mapping that takes one (left) or two (left & right) function or array valued arguments (operands) and derives a function. An operator may be:\nPrimitive: built-in and represented by a single glyph;[66]\nDefined: as a named and ordered collection of program statements.[66]\n\nSyntax[edit]\n\nAPL has explicit representations of functions, operators, and syntax, thus providing a basis for the clear and explicit statement of extended facilities in the language, and tools to experiment on them.[69]\n\nExamples[edit]\nHello, World[edit]\nThis displays \"Hello, world\":\n\nA design theme in APL is to define default actions in some cases that would produce syntax errors in most other programming languages.\nThe 'Hello, world' string constant above displays, because display is the default action on any expression for which no action is specified explicitly (e.g. assignment, function parameter).\n\nExponentiation[edit]\nAnother example of this theme is that exponentiation in APL is written as \"2*3\", which indicates raising 2 to the power 3 (this would be written as \"2^3\" in some other languages and \"2**3\" in FORTRAN and Python): many languages use * to signify multiplication as in 2*3 but APL uses 2\u00d73 for that. However, if no base is specified (as with the statement \"*3\" in APL, or \"^3\" in other languages), in most other programming languages one would have a syntax error. APL however assumes the missing base to be the natural logarithm constant e (2.71828....), and so interpreting \"*3\" as \"2.71828*3\".\n\nSimple statistics[edit]\nSuppose that X is an array of numbers. Then (+/X)\u00f7\u2374X gives its average. Reading right-to-left, \u2374X gives the number of elements in X, and since \u00f7 is a dyadic operator, the term to its left is required as well. It is in parenthesis since otherwise X would be taken (so that the summation would be of X\u00f7\u2374X, of each element of X divided by the number of elements in X), and +/X adds all the elements of X. Building on this, ((+/((X - (+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5 calculates the standard deviation. Further, since assignment is an operator, it can appear within an expression, so \n\nSD\u2190((+/((X - AV\u2190(T\u2190+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5\n\nwould place suitable values into T, AV and SD. Naturally, one would make this expression into a function for repeated use rather than retyping it each time.\n\nPick 6 lottery numbers[edit]\nThis following immediate-mode expression generates a typical set of Pick 6 lottery numbers: six pseudo-random integers ranging from 1 to 40, guaranteed non-repeating, and displays them sorted in ascending order:\n\n\nThe above does a lot, concisely; although it seems complex to a new APLer. It combines the following APL functions (also called primitives[70] and glyphs[71]):\n\nThe first to be executed (APL executes from rightmost to leftmost) is dyadic function ? (named deal when dyadic) that returns a vector consisting of a select number (left argument: 6 in this case) of random integers ranging from 1 to a specified maximum (right argument: 40 in this case), which, if said maximum \u2265 vector length, is guaranteed to be non-repeating; thus, generate/create 6 random integers ranging from 1-40.[72]\nThis vector is then assigned (\u2190) to the variable x, because it is needed later.\nThis vector is then sorted in ascending order by a monadic \u234b function, which has as its right argument everything to the right of it up to the next unbalanced close-bracket or close-parenthesis. The result of \u234b is the indices that will put its argument into ascending order.\nThen the output of \u234b is used to index the variable x, which we saved earlier for this purpose, thereby selecting its items in ascending sequence.\nSince there is no function to the left of the left-most x to tell APL what to do with the result, it simply outputs it to the display (on a single line, separated by spaces) without needing any explicit instruction to do that.\n? also has a monadic equivalent called roll, which simply returns one random integer between 1 and its sole operand [to the right of it], inclusive. Thus, a role-playing game program might use the expression ?20 to roll a twenty-sided die.\n\nPrime numbers[edit]\nThe following expression finds all prime numbers from 1 to R. In both time and space, the calculation complexity is  (in Big O notation).\n\n\nExecuted from right to left, this means:\n\nIota \u2373 creates a vector containing integers from 1 to R (if R= 6 at the start of the program, \u2373R is 1 2 3 4 5 6)\nDrop first element of this vector (\u2193 function), i.e., 1. So 1\u2193\u2373R is 2 3 4 5 6\nSet R to the new vector (\u2190, assignment primitive), i.e., 2 3 4 5 6\nThe / replicate operator is dyadic (binary) and the interpreter first evaluates its left argument (fully in parentheses):\nGenerate outer product of R multiplied by R, i.e., a matrix that is the multiplication table of R by R (\u00b0.\u00d7 operator), i.e.,\n\n\n\n4\n\n6\n\n8\n\n10\n\n12\n\n\n6\n\n9\n\n12\n\n15\n\n18\n\n\n8\n\n12\n\n16\n\n20\n\n24\n\n\n10\n\n15\n\n20\n\n25\n\n30\n\n\n12\n\n18\n\n24\n\n30\n\n36\n\nBuild a vector the same length as R with 1 in each place where the corresponding number in R is in the outer product matrix (\u2208, set inclusion or element of or Epsilon operator), i.e., 0 0 1 0 1\nLogically negate (not) values in the vector (change zeros to ones and ones to zeros) (\u223c, logical not or Tilde operator), i.e., 1 1 0 1 0\nSelect the items in R for which the corresponding element is 1 (/ replicate operator), i.e., 2 3 5\n(Note, this assumes the APL origin is 1, i.e., indices start with 1. APL can be set to use 0 as the origin, so that \u03b96 is 0 1 2 3 4 5, which is convenient for some calculations.)\n\nSorting[edit]\nThe following expression sorts a word list stored in matrix X according to word length:\n\n\nGame of Life[edit]\nThe following function \"life\", written in Dyalog APL, takes a boolean matrix and calculates the new generation according to Conway's Game of Life. It demonstrates the power of APL to implement a complex algorithm in very little code, but it is also very hard to follow unless one has advanced knowledge of APL.\n\nlife\u2190{\u21911 \u2375\u2228.\u22273 4=+/,\u00af1 0 1\u2218.\u2296\u00af1 0 1\u2218.\u233d\u2282\u2375}\n\nHTML tags removal[edit]\nIn the following example, also Dyalog, the first line assigns some HTML code to a variable txt and then uses an APL expression to remove all the HTML tags (explanation):\n\n      txt\u2190'<html><body><p>This is <em>emphasized</em> text.</p></body></html>'\n      {\u2375 /\u2368 ~{\u2375\u2228\u2260\\\u2375}\u2375\u220a'<>'} txt\nThis is emphasized text.\n\nUse[edit]\nAPL is used for many purposes including financial and insurance applications,[73] artificial intelligence,[74][75]\nneural networks[76]\nand robotics.[77] It has been argued that APL is a calculation tool and not a programming language;[78] its symbolic nature and array capabilities have made it popular with domain experts and data scientists[79] who do not have or require the skills of a computer programmer.\nAPL is well suited to image manipulation and computer animation, where graphic transformations can be encoded as matrix multiplications. One of the first commercial computer graphics houses, Digital Effects, produced an APL graphics product named Visions, which was used to create television commercials and animation for the 1982 film Tron.[80] Latterly, the Stormwind boating simulator uses APL to implement its core logic, its interfacing to the rendering pipeline middleware and a major part of its physics engine.[81]\nToday, APL remains in use in a wide range of commercial and scientific applications, for example\ninvestment management,[73]\nasset management,[82]\nhealth care,[83]\nand DNA profiling,[84][85] \nand by hobbyists.[86]\n\nNotable implementations[edit]\nAPL\\360[edit]\nThe first implementation of APL using recognizable APL symbols was APL\\360 which ran on the IBM System/360, and was completed in November 1966[1] though at that time remained in use only within IBM.[43] In 1973 its implementors, Larry Breed, Dick Lathwell and Roger Moore, were awarded the Grace Murray Hopper Award from the Association for Computing Machinery (ACM). It was given \"for their work in the design and implementation of APL\\360, setting new standards in simplicity, efficiency, reliability and response time for interactive systems.\"[87][88][89]\nIn 1975, the IBM 5100 microcomputer offered APL\\360[90] as one of two built-in ROM-based interpreted languages for the computer, complete with a keyboard and display that supported all the special symbols used in the language.[91]\nSignificant developments to APL\\360 included CMS/APL, which made use of the virtual storage capabilities of CMS and APLSV, which introduced shared variables, system variables and system functions. It was subsequently ported to the IBM System/370 and VSPC platforms until its final release in 1983, after which it was replaced by APL2.[43]\n\nAPL\\1130[edit]\nIn 1968, APL\\1130 became the first publicly available APL system,[92] created by IBM for the IBM 1130. It became the most popular IBM Type-III Library software that IBM released.[93]\n\nAPL*Plus and Sharp APL[edit]\n\nAPL*Plus and Sharp APL are versions of APL\\360 with added business-oriented extensions such as data formatting and facilities to store APL arrays in external files. They were jointly developed by two companies, employing various members of the original IBM APL\\360 development team.[94]\nThe two companies were I. P. Sharp Associates (IPSA), an APL\\360 services company formed in 1964 by Ian Sharp, Roger Moore and others, and STSC, a time-sharing and consulting service company formed in 1969 by Lawrence Breed and others. Together the two developed APL*Plus and thereafter continued to work together but develop APL separately as APL*Plus and Sharp APL. STSC ported APL*Plus to many platforms with versions being made for the VAX 11,[95] PC and UNIX, whereas IPSA took a different approach to the arrival of the Personal Computer and made Sharp APL available on this platform using additional PC-XT/360 hardware. In 1993, Soliton Incorporated was formed to support Sharp APL and it developed Sharp APL into SAX (Sharp APL for Unix). As of 2018, APL*Plus continues as APL2000 APL+Win.\nIn 1985, Ian Sharp, and Dan Dyer of STSC, jointly received the Kenneth E. Iverson Award for Outstanding Contribution to APL.[96]\n\nAPL2[edit]\nAPL2 was a significant re-implementation of APL by IBM which was developed from 1971 and first released in 1984. It provides many additions to the language, of which the most notable is nested (non-rectangular) array support.[43] As of 2018 it is available for mainframe computers running z/OS or z/VM and workstations running AIX, Linux, Sun Solaris, and Microsoft Windows.[97]\nThe entire APL2 Products and Services Team was awarded the Iverson Award in 2007.[96]\n\nAPLGOL[edit]\nIn 1972, APLGOL was released as an experimental version of APL that added structured programming language constructs to the language framework. New statements were added for interstatement control, conditional statement execution, and statement structuring, as well as statements to clarify the intent of the algorithm.[98] It was implemented for Hewlett-Packard in 1977.[99]\n\nDyalog APL[edit]\nDyalog APL was first released by British company Dyalog Ltd.[100] in 1983[101] and, as of 2018, is available for AIX, Linux (including on the Raspberry Pi), macOS and Microsoft Windows platforms. It is based on APL2, with extensions to support object-oriented programming[102] and functional programming.[103] Licences are free for personal/non-commercial use.[104]\nIn 1995, two of the development team - John Scholes and Peter Donnelly - were awarded the Iverson Award for their work on the interpreter.[96] Gitte Christensen and Morten Kromberg were joint recipients of the Iverson Award in 2016.[105]\n\nNARS2000[edit]\nNARS2000 is an open-source APL interpreter written by Bob Smith, a prominent APL developer and implementor from STSC in the 1970s and 1980s. NARS2000 contains advanced features and new datatypes and runs natively on Microsoft Windows, and other platforms under Wine.[106]\n\nAPLX[edit]\nMain article: APLX\nAPLX is a cross-platform dialect of APL, based on APL2 and with several extensions, which was first released by British company MicroAPL in 2002. Although no longer in development or on commercial sale it is now available free of charge from Dyalog.[107]\n\nGNU APL[edit]\nGNU APL is a free implementation of Extended APL as specified in ISO/IEC 13751:2001 and is thus an implementation of APL2. It runs on Linux (including on the Raspberry Pi), macOS, several BSD dialects, and on Windows (either using Cygwin for full support of all its system functions or as a native 64-bit Windows binary with some of its system functions missing). GNU APL uses Unicode internally and can be scripted. It was written by J\u00fcrgen Sauermann.[108]\nRichard Stallman, founder of the GNU Project, was an early adopter of APL, using it to write a text editor as a high school student in the summer of 1969.[109]\n\nInterpretation and compilation of APL[edit]\nAPL is traditionally an interpreted language, having language characteristics such as weak variable typing not well suited to compilation.[110] However, with arrays as its core data structure[111] it provides opportunities for performance gains through parallelism,[112] parallel computing,[113][114] massively parallel applications,[115][116] and very-large-scale integration (VLSI),[117][118] and from the outset APL has been regarded as a high-performance language[119] - for example, it was noted for the speed with which it could perform complicated matrix operations \"because it operates on arrays and performs operations like matrix inversion internally\".[120]\nNevertheless, APL is rarely purely interpreted and compilation or partial compilation techniques that are, or have been, used include the following:\n\nIdiom recognition[edit]\nMost APL interpreters support idiom recognition[121] and evaluate common idioms as single operations.[122][123] For example, by evaluating the idiom BV/\u2373\u2374A as a single operation (where BV is a Boolean vector and A is an array), the creation of two intermediate arrays is avoided.[124]\n\nOptimised bytecode[edit]\nWeak typing in APL means that a name may reference an array (of any datatype), a function or an operator. In general, the interpreter cannot know in advance which form it will be and must therefore perform analysis, syntax checking etc. at run-time.[125] However, in certain circumstances, it is possible to deduce in advance what type a name is expected to reference and then generate bytecode which can be executed with reduced run-time overhead. This bytecode can also be optimised using compilation techniques such as constant folding or common subexpression elimination.[126] The interpreter will execute the bytecode when present and when any assumptions which have been made are met. Dyalog APL includes support for optimised bytecode.[126]\n\nCompilation[edit]\nCompilation of APL has been the subject of research and experiment since the language first became available; the first compiler is considered to be the Burroughs APL-700[127] which was released around 1971.[128] In order to be able to compile APL, language limitations have to be imposed.[127][129] APEX is a research APL compiler which was written by Robert Bernecky and is available under the GNU Public License.[130]\nThe STSC APL Compiler is a hybrid of a bytecode optimiser and a compiler - it enables compilation of functions to machine code provided that its sub-functions and globals are declared, but the interpreter is still used as a runtime library and to execute functions which do not meet the compilation requirements.[131]\n\nStandards[edit]\nAPL has been standardized by the American National Standards Institute (ANSI) working group X3J10 and International Organization for Standardization (ISO) and International Electrotechnical Commission (IEC), ISO/IEC Joint Technical Committee 1 Subcommittee 22 Working Group 3. The Core APL language is specified in ISO 8485:1989, and the Extended APL language is specified in ISO/IEC 13751:2001.\n\nReferences[edit]\n\n\n^ Jump up to: a b \"APL Quotations and Anecdotes\". jsoftware.com. jsoftware. Retrieved April 14, 2018.\n\n^ \"std::iota\". cppreference.com.\n\n^ Jump up to: a b Iverson, Kenneth E. (1962). A Programming Language. Wiley. ISBN\u00a0978-0-471-43014-8. Archived from the original on 2014-10-27. Retrieved 2014-10-27.\n\n^ McIntyre, Donald B. (1991). \"Language as an Intellectual Tool: From Hieroglyphics to APL\". IBM Systems Journal. 30 (4): 554\u2013581. doi:10.1147/sj.304.0554. Archived from the original on March 4, 2016. Retrieved January 9, 2015.\n\n^ \"ACM Award Citation\u00a0\u2013 John Backus\". Awards.acm.org. 1977. Archived from the original on February 12, 2008. Retrieved February 3, 2010.\n\n^ Jump up to: a b Moler, Cleve. \"The Growth of MATLAB\" (PDF). Archived from the original (PDF) on April 11, 2009. Retrieved February 3, 2010.\n\n^ Jump up to: a b \"A Bibliography of APL and J\". Jsoftware.com. Retrieved March 2, 2010.\n\n^ Jump up to: a b \"An Interview with Arthur Whitney\". Kx Systems. January 4, 2004. Archived from the original on April 4, 2009. Retrieved March 2, 2010.\n\n^ Iverson, Kenneth E., \"Automatic Data Processing: Chapter 6: A programming language\" Archived June 4, 2009, at the Wayback Machine, 1960, Draft copy for Brooks and Iverson 1963 book, Automatic Data Processing.\n\n^ Brooks, Fred; Iverson, Kenneth, (1963), Automatic Data Processing, John Wiley & Sons Inc.\n\n^ \"Turing Award Citation 1979\". Awards.acm.org. Archived from the original on 2009-12-23. Retrieved February 3, 2010.\n\n^ Hellerman, H. (July 1964). \"Experimental Personalized Array Translator System\". Communications of the ACM. 7 (7): 433\u2013438. doi:10.1145/364520.364573. S2CID\u00a02181070.\n\n^ Falkoff, Adin D.; Iverson, Kenneth E., \"The Evolution of APL\", ACM SIGPLAN Notices 13, 1978-08.\n\n^ Abrams, Philip S., An interpreter for \"Iverson notation\", Technical Report: CS-TR-66-47, Department of Computer Science, Stanford University, August 1966;\n\n^ Haigh, Thomas (2005). \"Biographies: Kenneth E. Iverson\". IEEE Annals of the History of Computing. doi:10.1109/MAHC.2005.4.\n\n^ Jump up to: a b Breed, Larry, \"The First APL Terminal Session\", APL Quote Quad, Association for Computing Machinery, Volume 22, Number 1, September 1991, p.2-4.\n\n^ 19, 2009 Adin Falkoff \u2013 Computer History Museum. \"Iverson credited him for choosing the name APL and the introduction of the IBM golf-ball typewriter with the replacement typehead, which provided the famous character set to represent programs.\"\n\n^ Breed, Larry (August 2006). \"How We Got to APL\\1130\". Vector (British APL Association). 22 (3). ISSN\u00a00955-1433. Archived from the original on 2008-05-12. Retrieved 2007-04-02.\n\n^ APL\\1130 Manual Archived 2011-02-21 at the Wayback Machine, May 1969\n\n^ \"Remembering APL\". Quadibloc.com. Retrieved June 17, 2013.\n\n^ Falkoff, Adin; Iverson, Kenneth E., \"APL\\360 Users Guide\" Archived 2012-02-29 at the Wayback Machine, IBM Research, Thomas J. Watson Research Center, Yorktown Heights, NY, August 1968.\n\n^ \"APL\\360 Terminal System\" Archived 2010-07-11 at the Wayback Machine, IBM Research, Thomas J. Watson Research Center, March 1967.\n\n^ Jump up to: a b Pakin, Sandra (1968). APL\\360 Reference Manual. Science Research Associates, Inc. ISBN\u00a0978-0-574-16135-2.\n\n^ Falkoff, Adin D.; Iverson, Kenneth E.,The Design of APL, IBM Journal of Research and Development, Volume 17, Number 4, July 1973. \"These environmental defined functions were based on the use of still another class of functions\u2014called \"I-beams\" because of the shape of the symbol used for them\u2014which provide a more general facility for communication between APL programs and the less abstract parts of the system. The I-beam functions were first introduced by the system programmers to allow them to execute System/360 instructions from within APL programs, and thus use APL as a direct aid in their programming activity. The obvious convenience of functions of this kind, which appeared to be part of the language, led to the introduction of the monadic I-beam function for direct use by anyone. Various arguments to this function yielded information about the environment such as available space and time of day.\"\n\n^ Minker, Jack (January 2004). \"Beginning of Computing and Computer Sciences at the University of Maryland\" (PDF). Section 2.3.4: University of Maryland. p.\u00a038. Archived from the original (PDF) on June 10, 2011. Retrieved May 23, 2011.CS1 maint: location ()\n\n^ Stebbens, Alan. \"How it all began\". Archived from the original on 2016-03-04. Retrieved 2011-05-22.\n\n^ \"Xerox APL Language and Operations Reference Manual\" (PDF).\n\n^ \"SIGAPL\". Sigapl.org. Retrieved June 17, 2013.\n\n^ \"Fifty Years of BASIC, the Programming Language That Made Computers Personal\". time.com. TIME. April 29, 2014. Retrieved April 29, 2018.\n\n^ \"MCM Computers M70/M700\". old-computers.com. Archived from the original on April 3, 2018. Retrieved April 8, 2018.\n\n^ Stachniak, Stachniak (2011). Inventing the PC: The MCM/70 Story. McGill Queens's University Press. ISBN\u00a0978-0-7735-3852-8.\n\n^ Miller, Michael (December 17, 2014). \"PCs That Paved the Way for the Altair\". PCMagazine. Ziff Davis. Retrieved April 29, 2018.\n\n^ \"VideoBrain Family Computer\", Popular Science, November 1978, advertisement.\n\n^ \"A Look at SuperPet\". COMPUTE! The Journal for Progressive Computing. Small System Services Inc. December 1981. Retrieved April 29, 2018.\n\n^ Gates, Bill (January 31, 1976). \"An Open Letter to Hobbyists\". Homebrew Computer Club Newsletter. Retrieved April 29, 2018.\n\n^ Hui, Roger. \"Remembering Ken Iverson\". keiapl.org. KEIAPL. Retrieved January 10, 2015.\n\n^ ACM A.M. Turing Award. \"Kenneth E. Iverson \u2013 Citation\". amturing.acm.org. ACM. Retrieved January 10, 2015.\n\n^ ACM SIGPLAN. \"APL2: The Early Years\". www.sigapl.org. ACM. Retrieved January 10, 2015.\n\n^ Micro APL. \"Overview of the APL System\". www.microapl.co.uk. Micro APL. Retrieved January 10, 2015.\n\n^ Robertson, Graeme. \"A Personal View of APL2010\". archive.vector.org.uk. Vector \u2013 Journal of the British APL Association. Archived from the original on April 2, 2015. Retrieved January 10, 2015.\n\n^ Rodriguez, P.; Rojas, J.; Alfonseca, M.; Burgos, J. I. (1989). \"An Expert System in Chemical Synthesis written in APL2/PC\". ACM SIGAPL APL Quote Quad. 19 (4): 299\u2013303. doi:10.1145/75144.75185. S2CID\u00a016876053.\n\n^ IBM. \"APL2: A Programming Language for Problem Solving, Visualization and Database Access\". www-03.ibm.com. IBM. Retrieved January 10, 2015.\n\n^ Jump up to: a b c d Falkoff, Adin D. (1991). \"The IBM family of APL systems\". IBM Systems Journal. 30 (4): 416\u2013432. doi:10.1147/sj.304.0416. S2CID\u00a019030940.\n\n^ Pike, Rob (2018-03-25). \"Ivy\". GoDoc. Archived from the original on 2019-08-13.\n\n^ \"Wolfram Language FAQ\". Wolfram. Retrieved February 20, 2020. LISP and APL were two early influences\n\n^ Texas Instruments (1977). \"TI 745 full page ad: Introducing a New Set of Characters\". Computerworld. 11 (27): 32. Retrieved January 20, 2015.\n\n^ Dyalog. \"APL Fonts and Keyboards\". www.dyalog.com. Dyalog. Retrieved January 19, 2015.\n\n^ Smith, Bob. \"NARS2000 Keyboard\". www.sudleyplace.com. Bob Smith / NARS2000. Retrieved January 19, 2015.\n\n^ MicroAPL Ltd. \"Introduction to APL \u2013 APL Symbols\". www.microapl.co.uk. MicroAPL Ltd. Retrieved January 8, 2015.\n\n^ Brown, James A.; Hawks, Brent; Trimble, Ray (1993). \"Extending the APL character set\". ACM SIGAPL APL Quote Quad. 24 (1): 41\u201346. doi:10.1145/166198.166203.\n\n^ Kromberg, Morten. \"Unicode Support for APL\". archive.vector.org.uk. Vector, Journal of the British APL Association. Archived from the original on January 20, 2015. Retrieved January 8, 2015.\n\n^ Hsu, Aaron. \"Computer Science Outreach and Education with APL\". Dyalog, Ltd. Retrieved July 15, 2016.\n\n^ Dyalog, Inc. APL fonts and keyboards. http://www.dyalog.com/apl-font-keyboard.htm\n\n^ Jump up to: a b MicroAPL. \"Operators\". www.microapl.co.uk. MicroAPL. Retrieved January 12, 2015.\n\n^ Primitive Functions. \"Primitive Functions\". www.microapl.co.uk/. Retrieved January 1, 2015.\n\n^ Workspace. \"The Workspace\". www.microapl.co.uk. Retrieved January 1, 2015.\n\n^ \"example\". Catpad.net. Archived from the original on July 8, 2013. Retrieved June 17, 2013.\n\n^ APL Symbols. \"Entering APL Symbols\". www.microapl.co.uk. Retrieved January 1, 2015.\n\n^ Dickey, Lee, A list of APL Transliteration Schemes, 1993\n\n^ Iverson K.E.,\n\"Notation as a Tool of Thought Archived 2013-09-20 at the Wayback Machine\", Communications of the ACM, 23: 444-465 (August 1980).\n\n^ Batenburg. \"APL Efficiency\". www.ekevanbatenburg.nl. Retrieved January 1, 2015.\n\n^ Vaxman. \"APL Great Programming\" (PDF). www.vaxman.de. Retrieved January 1, 2015.\n\n^ Janko, Wolfgang (May 1987). \"Investigation into the efficiency of using APL for the programming of an inference machine\". ACM SIGAPL APL Quote Quad. 17 (4): 450\u2013456. doi:10.1145/384282.28372.\n\n^ Borealis. \"Why APL?\". www.aplborealis.com. Retrieved January 1, 2015.\n\n^ Iverson, Kenneth E. \"A Dictionary of APL\". www.jsoftware.com. JSoftware; Iverson Estate. Retrieved January 20, 2015.\n\n^ Jump up to: a b c d e f \"APL concepts\". Microapl.co.uk. Retrieved February 3, 2010.\n\n^ \"Nested array theory\". Nial.com. Archived from the original on 2011-07-09. Retrieved February 3, 2010.\n\n^ Jump up to: a b c \"Programmera i APL\", Bohman, Fr\u00f6berg, Studentlitteratur, ISBN\u00a091-44-13162-3\n\n^ Iverson, Kenneth E. \"APL Syntax and Semantics\". www.jsoftware.com. I. P. Sharp Associates. Retrieved January 11, 2015.\n\n^ MicroAPL. \"APL Primitives\". www.microapl.co.uk. MicroAPL. Retrieved January 11, 2015.\n\n^ NARS2000. \"APL Font \u2013 Extra APL Glyphs\". wiki.nars2000.org. NARS2000. Retrieved January 11, 2015.\n\n^ Fox, Ralph L. \"Systematically Random Numbers\". www.sigapl.org. SIGAPL. Retrieved January 11, 2015.\n\n^ Jump up to: a b \"2017 Annual Report\" (PDF). SimCorp. February 1, 2018. Retrieved April 3, 2018. Sofia is a front-to-back investment management platform like SimCorp Dimension. ... Sofia is based on the APL coding language just like some parts of SimCorp Dimension.\n\n^ Lee, Georges; Lelouche, Ruddy; Meissonnier, Vincent; Zarri, Gian Piero (September 1, 1982). \"Using APL in an Artificial Intelligence environment\". ACM SIGAPL APL Quote Quad. 13 (1): 183\u2013191. doi:10.1145/390006.802242. Retrieved April 3, 2018.\n\n^ Fordyce, K.; Sullivan, G. (1985). \"Artificial Intelligence Development Aids\". APL Quote Quad. APL 85 Conf. Proc. (15): 106\u2013113. doi:10.1145/255315.255347.\n\n^ Alfonseca, Manuel (July 1990). \"Neural networks in APL\". ACM SIGAPL APL Quote Quad. 20 (4): 2\u20136. doi:10.1145/97811.97816. Retrieved April 3, 2018.\n\n^ Kromberg, Morten. \"Robot Programming in APL\". www.dyalog.com/. Retrieved January 6, 2015.\n\n^ Holmes, W N (May 1978). \"Is APL a Programming Language?\". The Computer Journal. 21 (2): 128\u2013131. doi:10.1093/comjnl/21.2.128.\n\n^ Hsu, Aaron (November 18, 2017). \"Design Patterns vs. Anti-pattern in APL\". functionalconf.com. Archived from the original on March 23, 2018. Retrieved 2018-04-07.\n\n^ Magnenat-Thalmann, Nadia; Thalmann, Daniel (1985). Computer Animation Theory and Practice. Springer-Verlag. p.\u00a038. ISBN\u00a09784431684336. Retrieved April 3, 2018. Digital Effects is another production house that worked on Tron. They used a laser-scanning system to digitize, store and reproduce images. Judson Rosebush, president of Digital Effects, is the primary designer of APL VISION and FORTRAN VISION, two computer animation packages that are currently used.\n\n^ Gutsell, Sam (October 17, 2017). \"Stormwind Simulator at Dyalog '16\". www.optima-systems.co.uk. Optima Systems. Retrieved April 3, 2018. Stormwind is a [3D boating simulator] that has gained a huge amount of interest in the APL community.\n\n^ \"OP-Pohjola ja Tieto hoitivat sovelluksen muutosty\u00f6t sujuvalla yhteisty\u00f6ll\u00e4\" [Smooth cooperation between OP-Pohjola and Tieto enabled app modification] (PDF). www.tieto.com (in Finnish). Tieto. Retrieved April 3, 2018.[permanent dead link]\n\n^ \"Vi idag\" [We today]. profdoccare.se (in Swedish). Retrieved April 3, 2018. Through the choice of APL as a technical platform, it is relatively easy to quickly build a solution that can be called a executable prototype (translated from the original)\n\n^ Brenner, Charles. \"DNA Identification Technology and APL\". dna-view.com. Presentation at the 2005 APL User Conference. Retrieved January 9, 2015.\n\n^ Brenner, Charles. \"There's DNA Everywhere \u2013 an Opportunity for APL\". www.youtube.com. YouTube. Retrieved January 9, 2015.\n\n^ \"Tips for golfing in APL\". stackexchange.com. Retrieved April 3, 2018.\n\n^ \"Awards \u2013 1973 \u2013 Lawrence Breed\". Association for Computing Machinery. Archived from the original on April 2, 2012.\n\n^ \"Awards \u2013 1973 \u2013 Richard Lathwell\". Association for Computing Machinery. Archived from the original on April 2, 2012.\n\n^ \"Awards \u2013 1973 \u2013 Roger Moore\". Association for Computing Machinery. Archived from the original on April 2, 2012.\n\n^ \"IBM 5100\". old-computers.com. Archived from the original on April 30, 2018. Retrieved April 8, 2018.\n\n^ \"Welcome, IBM, to personal computing\". BYTE. December 1975. p.\u00a090. Retrieved April 29, 2018.\n\n^ \"Chronology of APL and its Influences on Computer Language Development\". www.sigapl.org. ACM. Retrieved April 29, 2018.\n\n^ Larry Breed (August 2006). \"How We Got To APL\\1130\". Vector (British APL Association). 22 (3). ISSN\u00a00955-1433. Archived from the original on May 12, 2008. Retrieved April 29, 2018.\n\n^ Roger Moore (2005). \"History of I. P. Sharp Associates Timesharing and Network\". Rogerdmoore.ca. Roger Moore. Archived from the original on April 4, 2019. Retrieved March 7, 2018.\n\n^ Blumenthal, Marcia (May 18, 1981). \"VAX-11s Acquire APL Processor\". Computerworld. Retrieved April 22, 2018.\n\n^ Jump up to: a b c \"Kenneth E. Iverson Award for Outstanding Contribution to APL\". SIGPLAN Chapter on Array Programming Languages (SIGAPL). Archived from the original on February 26, 2012.\n\n^ \"APL2: What's New\". ibm.com. ibm. Retrieved April 22, 2018.\n\n^ Kelley, R.A. \"APLGOL, an Experimental Structured Programming Language\". IBM Journal of Research and Development.\n\n^ Johnston, Ronald L. \"APLGOL: Structured Programming Facilities for APL\". Hewlett-Packard Journal.\n\n^ \"Dyalog Ltd website\". Retrieved 6 June 2018.\n\n^ \"Dyalog at 25\" (PDF). Vector Magazine. British APL Association. September 2008. Retrieved April 14, 2018.[permanent dead link]\n\n^ Kromberg, Morten (22 October 2007). \"Arrays of Objects\" (PDF). Proceedings of the 2007 Symposium on Dynamic Languages: 20. doi:10.1145/1297081.1297087. ISBN\u00a09781595938688. S2CID\u00a018484472. Retrieved 27 August 2018.\n\n^ Scholes, John. \"D: A functional subset of Dyalog APL\". British APL Asscociation.\n\n^ \"Dyalog - Prices and Licences\".\n\n^ \"2016 Iverson Award Recognises Dyalog's CEO and CXO\". Retrieved 6 June 2018.\n\n^ \"Nested Arrays Research System \u2013 NARS2000: An Experimental APL Interpreter\". NARS2000. Sudley Place Software. Retrieved July 10, 2015.\n\n^ \"APLX has been withdrawn from commercial sale but can be downloaded free of charge\". Microapl.com. Retrieved April 14, 2018.\n\n^ \"GNU APL\". directory.fsf.org. Free Software Directory. Retrieved September 28, 2013.\n\n^ Stallman, Richard M. \"RMS Ber\u00e4ttar\". Archived from the original on November 26, 2018. Retrieved April 22, 2018.\n\n^ Budd, Timothy (1988). An APL Compiler. Springer-Verlag. ISBN\u00a0978-0-387-96643-4.\n\n^ SIGAPL. \"What is APL?\". www.sigapl.org. SIGAPL. Retrieved January 20, 2015.\n\n^ Ju, Dz-Ching; Ching, Wai-Mee (1991). \"Exploitation of APL data parallelism on a shared-memory MIMD machine\". Newsletter ACM SIGPLAN Notices. 26 (7): 61\u201372. doi:10.1145/109625.109633. S2CID\u00a08584353.\n\n^ Hsu, Aaron W.; Bowman, William J. \"Revisiting APL in the Modern Era\" (PDF). www.cs.princeton.edu. Indiana University / Princeton. Retrieved January 20, 2015.\n\n^ Ching, W.-M.; Ju, D. (1991). \"Execution of automatically parallelized APL programs on RP3\". IBM Journal of Research & Development. 35 (5/6): 767\u2013777. doi:10.1147/rd.355.0767. Retrieved January 20, 2015.\n\n^ Blelloch, Guy E.; Sabot, Gary W. (1990). \"Compiling Collection-Oriented Languages onto Massively Parallel Computers\". Journal of Parallel and Distributed Computing. 8 (2): 119\u2013134. CiteSeerX\u00a010.1.1.51.5088. doi:10.1016/0743-7315(90)90087-6. Collection oriented languages include APL, APL2\n\n^ Jendrsczok, Johannes; Hoffmann, Rolf; Ediger, Patrick; Keller, J\u00f6rg. \"Implementing APL-like data parallel functions on a GCA machine\" (PDF). www.fernuni-hagen.de. Fernuni-Hagen.De. pp.\u00a01\u20136. Archived from the original (PDF) on January 22, 2015. Retrieved January 22, 2015. GCA \u2013 Global Cellular Automation. Inherently massively parallel. 'APL has been chosen because of the ability to express matrix and vector' structures.\n\n^ Brenner of IBM T.J.Watson Research Center, Norman (1984). \"VLSI circuit design using APL with fortran subroutines\". Proceedings of the international conference on APL - APL '84. ACM SIGAPL APL Quote Quad. 14. ACM SIGAPL. pp.\u00a077\u201379. doi:10.1145/800058.801079. ISBN\u00a0978-0897911375. S2CID\u00a030863491. APL for interactiveness and ease of coding\n\n^ Gamble, D.J.; Hobson, R.F. (1989). \"Towards a graphics/Procedural environment for constructing VLSI module generators\". Conference Proceeding IEEE Pacific Rim Conference on Communications, Computers and Signal Processing. pp.\u00a0606\u2013611. doi:10.1109/PACRIM.1989.48437. S2CID\u00a07921438. VLSI module generators are described. APL and C, as examples of interpreted and compiled languages, can be interfaced to an advanced graphics display\n\n^ Lee, Robert S. (1983). \"Two Implementations of APL\". PC Magazine. 2 (5): 379. Retrieved January 20, 2015.\n\n^ MARTHA and LLAMA. \"The APL Computer Language\". marthallama.org. MarthaLlama. Retrieved January 20, 2015.\n\n^ Metzger, Robert; Wen, Zhaofang (2000). Automatic Algorithm Recognition and Replacement: A New Approach to Program Optimization. The MIT press. ISBN\u00a09780262133685. Retrieved May 6, 2018.\n\n^ Snyder, Lawrence (1982). \"Recognition and Selection of Idioms for Code Optimization\". Acta Informatica. 17 (3). doi:10.1007/BF00264357. S2CID\u00a08369972.\n\n^ Cheng, Feng Sheng (1981). \"Idiom matching: an optimization technique for an APL compiler\". Iowa State University. Retrieved May 6, 2018. \n\n^ \"Idiom Recognition\". dyalog.com. Retrieved May 6, 2018.\n\n^ Strawn, George O. (March 1977). \"Does APL really need run\u2010time parsing?\". Journal of Software: Practice and Experience. 7 (2): 193\u2013200. doi:10.1002/spe.4380070207. S2CID\u00a01463012.\n\n^ Jump up to: a b \"Compiler User Guide\" (PDF). www.dyalog.com. Dyalog Ltd. Retrieved May 7, 2018.\n\n^ Jump up to: a b \nDriscoll Jr., Graham C.; Orth, Donald L. (November 1986). \"Compiling APL: The Yorktown APL Translator\". IBM Journal of Research and Development. 30 (6): 583\u2013593. doi:10.1147/rd.306.0583. S2CID\u00a02299699.\n\n^ \"Chronology of APL\". www.sigapl.org. ACM. Retrieved May 7, 2018.\n\n^ \nWai-Mee, Ching (November 1986). \"Program Analysis and Code Generation in an APL/370 Compiler\". IBM Journal of Research and Development. 30 (6): 594\u2013602. doi:10.1147/rd.306.0594. S2CID\u00a017306407.\n\n^ \"The APEX Project\".\n\n^ \"APL Compiler (message from Jim Weigang to the comp.lang.apl Newsgroup)\". Apr 5, 1994.\n\n\nFurther reading[edit]\nAn APL Machine (1970 Stanford doctoral dissertation by Philip Abrams)\nA Personal History Of APL (1982 article by Michael S. Montalbano)\nMcIntyre, Donald B. (1991). \"Language as an intellectual tool: From hieroglyphics to APL\" (PDF). IBM Systems Journal. 30 (4): 554\u2013581. doi:10.1147/sj.304.0554. Archived from the original (PDF) on May 4, 2006.\nIverson, Kenneth E. (1991). \"A Personal view of APL\" (PDF). IBM Systems Journal. 30 (4): 582\u2013593. doi:10.1147/sj.304.0582. Archived from the original (PDF) on February 27, 2008.\nA Programming Language by Kenneth E. Iverson\nAPL in Exposition by Kenneth E. Iverson\nBrooks, Frederick P.; Kenneth Iverson (1965). Automatic Data Processing, System/360 Edition. ISBN\u00a00-471-10605-4.\nAskoolum, Ajay (August 2006). System Building with APL + Win. Wiley. ISBN\u00a0978-0-470-03020-2.\nFalkoff, Adin D.; Iverson, Kenneth E.; Sussenguth, Edward H. (1964). \"A Formal Description of System/360\" (PDF). IBM Systems Journal. 3 (2): 198\u2013261. doi:10.1147/sj.32.0198. Archived from the original (PDF) on February 27, 2008.\nHistory of Programming Languages, chapter 14[clarification needed]\nBanon, Gerald Jean Francis (1989). Bases da Computacao Grafica. Rio de Janeiro: Campus. p.\u00a0141.\nLePage, Wilbur R. (1978). Applied A.P.L. Programming. Prentice Hall.\nMougin, Philippe; Ducasse, Stephane (November 2003). \"OOPAL: Integrating Array Programming in ObjectOriented Programming\" (PDF). Proceeding OOPSLA '03 Proceedings of the 18th Annual ACM SIGPLAN Conference on Object-oriented Programing, Systems, Languages, and Applications. 38 (11): 65\u201377. doi:10.1145/949343.949312. Archived from the original (PDF) on November 14, 2006.\nDyalog Limited (September 2006). An Introduction to Object Oriented Programming For APL Programmers (PDF). Dyalog Limited. Archived from the original (PDF) on October 4, 2007.\nShustek, Len (October 10, 2012). \"The APL Programming Language Source Code\". Computer History Museum (CHM). Archived from the original on September 6, 2017. Retrieved September 6, 2017.\nSvoboda, Anton\u00edn; White, Donnamaie E. (2016) [2012, 1985, 1979-08-01]. Advanced Logical Circuit Design Techniques (PDF) (retyped electronic reissue\u00a0ed.). Garland STPM Press (original issue) / WhitePubs Enterprises, Inc. (reissue). ISBN\u00a0978-0-8240-7014-4. LCCN\u00a078-31384. Archived (PDF) from the original on 2017-04-14. Retrieved 2017-04-15. [1] [2]\nVideo[edit]\nThe Origins of APL - a 1974 talk show style interview with the original developers of APL.\nAPL demonstration - a 1975 live demonstration of APL by Professor Bob Spence, Imperial College London.\nConway's Game Of Life in APL - a 2009 tutorial by John Scholes of Dyalog Ltd. which implements Conway's Game of Life in a single line of APL.\n50 Years of APL - a 2009 introduction to APL by Graeme Robertson.\nExternal links[edit]\n\n\nOnline resources[edit]\nTryAPL.org, an online APL primer\nAPL Wiki\nAPL at Curlie\nAPL2C, a source of links to APL compilers\nProviders[edit]\nIBM APL2\nDyalog APL\nAPLX\nAPL2000\nNARS2000\nGNU APL\nOpenAPL\nUser groups and societies[edit]\nFinland: Finnish APL Association (FinnAPL)\nFrance: APL et J\nGermany: APL-Germany e.V.\nJapan: Japan APL Association (JAPLA)\nSweden: Swedish APL User Group (SwedAPL) Archived 2018-04-02 at the Wayback Machine\nSwitzerland: Swiss APL User Group (SAUG)\nUnited Kingdom: The British APL Association\nUnited States: ACM SIGPLAN chapter on Array Programming Languages (SIGAPL)\n\n\n\n\n\n\n\n\n"
                ],
                "output": "readability",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632851441.89175",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-28T17:50:53.107537+00:00",
                "status": "succeeded"
            }
        ],
        "screenshot": [
            {
                "cmd": [
                    "chromium-browser",
                    "--headless",
                    "--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/{VERSION} (+https://github.com/ArchiveBox/ArchiveBox/)",
                    "--window-size=1440,2000",
                    "--timeout=90000",
                    "--screenshot",
                    "https://en.wikipedia.org/wiki/APL_(programming_language)"
                ],
                "cmd_version": "Chromium 93.0.4577.82",
                "end_ts": "2021-09-28T17:50:52.146274+00:00",
                "index_texts": null,
                "output": "screenshot.png",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632851441.89175",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-28T17:50:50.843557+00:00",
                "status": "succeeded"
            }
        ],
        "singlefile": [
            {
                "cmd": [
                    "/home/wesleyac/code/notebook/data/archivebox/node_modules/single-file/cli/single-file",
                    "--browser-executable-path=chromium-browser",
                    "--browser-args=[\"--headless\", \"--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/{VERSION} (+https://github.com/ArchiveBox/ArchiveBox/)\", \"--window-size=1440,2000\"]",
                    "https://en.wikipedia.org/wiki/APL_(programming_language)",
                    "singlefile.html"
                ],
                "cmd_version": "0.3.31",
                "end_ts": "2021-09-28T17:50:50.832939+00:00",
                "index_texts": null,
                "output": "singlefile.html",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632851441.89175",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-28T17:50:42.855718+00:00",
                "status": "succeeded"
            }
        ],
        "title": [
            {
                "cmd": [
                    "curl",
                    "--silent",
                    "--location",
                    "--compressed",
                    "--max-time",
                    "90",
                    "--user-agent",
                    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/0.6.2 (+https://github.com/ArchiveBox/ArchiveBox/) curl/curl 7.76.1 (x86_64-pc-linux-gnu)",
                    "https://en.wikipedia.org/wiki/APL_(programming_language)"
                ],
                "cmd_version": "curl 7.76.1 (x86_64-pc-linux-gnu)",
                "end_ts": "2021-09-28T17:50:42.561535+00:00",
                "index_texts": null,
                "output": "APL (programming language) - Wikipedia",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632851441.89175",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-28T17:50:42.272358+00:00",
                "status": "succeeded"
            }
        ],
        "wget": []
    },
    "icons": null,
    "is_archived": true,
    "is_static": false,
    "latest": {
        "archive_org": "https://web.archive.org/web/20210928175102/https://en.wikipedia.org/wiki/APL_%28programming_language%29",
        "dom": "output.html",
        "favicon": "favicon.ico",
        "git": null,
        "media": null,
        "pdf": null,
        "screenshot": "screenshot.png",
        "singlefile": "singlefile.html",
        "title": "APL (programming language) - Wikipedia",
        "warc": null,
        "wget": null
    },
    "link_dir": "/home/wesleyac/code/notebook/data/archivebox/archive/1632851441.89175",
    "newest_archive_date": "2021-09-28T17:51:00.765671+00:00",
    "num_failures": 0,
    "num_outputs": 9,
    "oldest_archive_date": "2021-09-28T17:50:42.272358+00:00",
    "path": "/wiki/APL_(programming_language)",
    "schema": "Link",
    "scheme": "https",
    "snapshot_id": "c6370c24-2a35-4c41-9088-57fd7d9b7a28",
    "sources": [
        "/home/wesleyac/code/notebook/data/archivebox/sources/1632851441-import.txt"
    ],
    "tags": null,
    "tags_str": "",
    "timestamp": "1632851441.89175",
    "title": "APL (programming language) - Wikipedia",
    "updated": "2021-09-28T17:50:42.271024+00:00",
    "updated_date": "2021-09-28 17:50",
    "url": "https://en.wikipedia.org/wiki/APL_(programming_language)"
}