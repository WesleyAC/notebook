{
    "archive_path": "archive/1632694375.886866",
    "base_url": "en.wikipedia.org/wiki/Internet_Relay_Chat",
    "basename": "Internet_Relay_Chat",
    "bookmarked_date": "2021-09-26 22:12",
    "canonical": {
        "archive_org_path": "https://web.archive.org/web/en.wikipedia.org/wiki/Internet_Relay_Chat",
        "dom_path": "output.html",
        "favicon_path": "favicon.ico",
        "git_path": "git/",
        "google_favicon_path": "https://www.google.com/s2/favicons?domain=en.wikipedia.org",
        "headers_path": "headers.json",
        "index_path": "index.html",
        "media_path": "media/",
        "mercury_path": "mercury/content.html",
        "pdf_path": "output.pdf",
        "readability_path": "readability/content.html",
        "screenshot_path": "screenshot.png",
        "singlefile_path": "singlefile.html",
        "warc_path": "warc/",
        "wget_path": null
    },
    "domain": "en.wikipedia.org",
    "extension": "",
    "hash": "1CHTX6W9HGQYK8ZRW440",
    "history": {
        "archive_org": [
            {
                "cmd": [
                    "curl",
                    "--silent",
                    "--location",
                    "--compressed",
                    "--head",
                    "--max-time",
                    "90",
                    "--user-agent",
                    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/0.6.2 (+https://github.com/ArchiveBox/ArchiveBox/) curl/curl 7.76.1 (x86_64-pc-linux-gnu)",
                    "https://web.archive.org/save/https://en.wikipedia.org/wiki/Internet_Relay_Chat"
                ],
                "cmd_version": "curl 7.76.1 (x86_64-pc-linux-gnu)",
                "end_ts": "2021-09-26T22:13:43.166521+00:00",
                "index_texts": null,
                "output": "https://web.archive.org/web/20210926221337/https://en.wikipedia.org/wiki/Internet_Relay_Chat",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632694375.886866",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-26T22:13:35.789055+00:00",
                "status": "succeeded"
            }
        ],
        "dom": [
            {
                "cmd": [
                    "chromium-browser",
                    "--headless",
                    "--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/{VERSION} (+https://github.com/ArchiveBox/ArchiveBox/)",
                    "--window-size=1440,2000",
                    "--timeout=90000",
                    "--dump-dom",
                    "https://en.wikipedia.org/wiki/Internet_Relay_Chat"
                ],
                "cmd_version": "Chromium 93.0.4577.82",
                "end_ts": "2021-09-26T22:13:14.532550+00:00",
                "index_texts": null,
                "output": "output.html",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632694375.886866",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-26T22:13:12.514717+00:00",
                "status": "succeeded"
            }
        ],
        "favicon": [
            {
                "cmd": [
                    "curl",
                    "--silent",
                    "--location",
                    "--compressed",
                    "--max-time",
                    "90",
                    "--output",
                    "favicon.ico",
                    "--user-agent",
                    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/0.6.2 (+https://github.com/ArchiveBox/ArchiveBox/) curl/curl 7.76.1 (x86_64-pc-linux-gnu)",
                    "https://www.google.com/s2/favicons?domain=en.wikipedia.org"
                ],
                "cmd_version": "curl 7.76.1 (x86_64-pc-linux-gnu)",
                "end_ts": "2021-09-26T22:12:56.873687+00:00",
                "index_texts": null,
                "output": "favicon.ico",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632694375.886866",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-26T22:12:56.722162+00:00",
                "status": "succeeded"
            }
        ],
        "git": [],
        "headers": [
            {
                "cmd": [
                    "curl",
                    "--silent",
                    "--location",
                    "--compressed",
                    "--head",
                    "--max-time",
                    "90",
                    "--user-agent",
                    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/0.6.2 (+https://github.com/ArchiveBox/ArchiveBox/) curl/curl 7.76.1 (x86_64-pc-linux-gnu)",
                    "https://en.wikipedia.org/wiki/Internet_Relay_Chat"
                ],
                "cmd_version": "curl 7.76.1 (x86_64-pc-linux-gnu)",
                "end_ts": "2021-09-26T22:12:57.070347+00:00",
                "index_texts": null,
                "output": "headers.json",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632694375.886866",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-26T22:12:56.887246+00:00",
                "status": "succeeded"
            }
        ],
        "media": [],
        "mercury": [
            {
                "cmd": [
                    "/home/wesleyac/code/notebook/data/archivebox/node_modules/@postlight/mercury-parser/cli.js",
                    "https://en.wikipedia.org/wiki/Internet_Relay_Chat"
                ],
                "cmd_version": "1.0.0",
                "end_ts": "2021-09-26T22:13:35.774123+00:00",
                "index_texts": null,
                "output": "mercury",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632694375.886866",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-26T22:13:25.977515+00:00",
                "status": "succeeded"
            }
        ],
        "pdf": [],
        "readability": [
            {
                "cmd": [
                    "/home/wesleyac/code/notebook/data/archivebox/node_modules/readability-extractor/readability-extractor",
                    "/run/user/1000/tmpfkh3h4_y"
                ],
                "cmd_version": "0.0.3",
                "end_ts": "2021-09-26T22:13:25.917780+00:00",
                "index_texts": [
                    "\n\n\nThe first IRC server, tolsun.oulu.fi, a Sun-3 server on display near the University of Oulu computer centre. (2001)\nInternet Relay Chat (IRC) is a text-based chat (instant messaging) system. It enables discussions among any number of participants in so-called conversation channels, as well as discussions between only two partners \u2014 for example, in question-and-answer dialogues.[1] Any participant may open a new conversation channel, and a single computer user can also take part in several such simultaneous channels.\nIn order to establish or join a chat, a network program, called an IRC client, is required for accessing a channel by connecting to a server. The IRC client can be either an independent program on the local computer (e.g. mIRC, XChat) or take the form of a special user interface from within a larger program such as an Internet browser; the Opera browser, for example, includes an IRC client, and clients such as Mibbit and IRCCloud or the open source KiwiIRC and MIT's The Lounge Chat can work in connection with many popular browsers.\nAn IRC network of interconnected servers operating as relay stations is used to mediate the calls in the IRC. The essential feature of this network is its BITNET communication topology, which permits only one communication path between any two participants. Historically, this ensured efficient communication, because in the early days of IRC, intercontinental data lines had a very limited capacity. The topology enabled a message from a client on one continent not to be sent individually for each client on another continent, but only once to a local server, which then distributed it to  clients. Despite limited management capacities, very large \u201cchat landscapes\u201d were possible. The disadvantage is the lack of redundancy, which manifests itself in so-called net splits: if any server fails, the network automatically breaks into separate parts until a new connection is established between the parts.\nThe largest IRC networks consist of several dozen IRC servers that simultaneously connect over 100,000 users and manage tens of thousands of channels, on each of which several thousand people can simultaneously participate. Despite these enormous proportions, the delay in a sent text is usually on the order of tenths of a second and seldom exceeds one second's time. \nIRC usage has been declining steadily since 2003, losing 60 percent of its users (from 1 million to about 400,000 in 2021) and half of its channels (from half a million in 2003 to under 200,000 in 2021).[2]  In April 2011, the top 100 IRC networks served more than half a million users at a time,[3] hosting hundreds of thousands of channels[3] operating on a total of roughly 1\u00a0500 servers[3] out of roughly then 3\u00a0200 IRC\u00a0servers worldwide.[4]  As of June 2021, there are 481 different IRC networks known to be operating,[5] of which the open source Libera Chat, founded in May 2021, has the most users, with 21,348 channels on 15,433 servers; between them, the top 100 IRC networks share 188,336 channels operating on 96,708 servers.[6]\nFrom a technical standpoint, Internet Relay Chat is implemented as an application layer protocol to facilitate communication in the form of text. The chat process works on a client\u2013server networking model. As already discussed, IRC clients can be stand-alone computer programs or web-based applications running either locally in the browser or on a third party server. These clients communicate with chat servers to transfer messages to other clients.[7] IRC is mainly designed for group communication in discussion forums, called channels,[8] but also allows one-on-one communication via private messages[9] as well as chat and data transfer,[10] including file sharing.[11]\nClient software is available for every major operating system that supports Internet access.[12]\n\n\n\n History[edit]\n\nIRC was created by Jarkko Oikarinen in August 1988 to replace a program called MUT (MultiUser Talk) on a BBS called OuluBox at the University of Oulu in Finland, where he was working at the Department of Information Processing Science. Jarkko intended to extend the BBS software he administered, to allow news in the Usenet style, real time discussions and similar BBS features. The first part he implemented was the chat part, which he did with borrowed parts written by his friends Jyrki Kuoppala and Jukka Pihl. The first IRC network was running on a single server named tolsun.oulu.fi.[13] Oikarinen found inspiration in a chat system known as Bitnet Relay, which operated on the BITNET.[14]\nJyrki Kuoppala pushed Oikarinen to ask Oulu University to free the IRC code so that it also could be run outside of Oulu, and after they finally got it released, Jyrki Kuoppala immediately installed another server. This was the first \"IRC network\".  Oikarinen got some friends at the Helsinki University and Tampere University to start running IRC servers when his number of users increased and other universities soon followed. At this time Oikarinen realized that the rest of the BBS features probably wouldn't fit in his program.[13]\nOikarinen got in touch with people at the University of Denver and Oregon State University. They had their own IRC network running and wanted to connect to the Finnish network. They had obtained the program from one of Oikarinen's friends, Vijay Subramaniam\u2014the first non-Finnish person to use IRC. IRC then grew larger and got used on the entire Finnish national network\u2014Funet\u2014and then connected to Nordunet, the Scandinavian branch of the Internet. In November 1988, IRC had spread across the Internet and in the middle of 1989, there were some 40 servers worldwide.[13]\n\nEFnet[edit]\nIn August 1990, the first major disagreement took place in the IRC world. The \"A-net\" (Anarchy net) included a server named eris.berkeley.edu. It was all open, required no passwords and had no limit on the number of connects. As Greg \"wumpus\" Lindahl explains: \"it had a wildcard server line, so people were hooking up servers and nick-colliding everyone\". The \"Eris Free Network\", EFnet, made the eris machine the first to be Q-lined (Q for quarantine) from IRC. In wumpus' words again: \"Eris refused to remove that line, so I formed EFnet. It wasn't much of a fight; I got all the hubs to join, and almost everyone else got carried along.\" A-net was formed with the eris servers, while EFnet was formed with the non-eris servers. History showed most servers and users went with EFnet. Once A-net disbanded, the name EFnet became meaningless, and once again it was the one and only IRC network.[13]\nAround that time IRC was used to report on the 1991 Soviet coup d'\u00e9tat attempt throughout a media blackout.[15] It was previously used in a similar fashion during the Gulf War.[16] Chat logs of these and other events are kept in the ibiblio archive.[17]\n\nUndernet fork[edit]\nAnother fork effort, the first that really made a big and lasting difference, was initiated by 'Wildthang' in the U.S. October 1992 (it forked off the EFnet ircd version 2.8.10). It was meant to be just a test network to develop bots on but it quickly grew to a network \"for friends and their friends\". In Europe and Canada a separate new network was being worked on and in December the French servers connected to the Canadian ones, and by the end of the month, the French and Canadian network was connected to the US one, forming the network that later came to be called \"The Undernet\".[13]\nThe \"undernetters\" wanted to take ircd further in an attempt to make it less bandwidth consumptive and to try to sort out the channel chaos (netsplits and takeovers) that EFnet started to suffer from. For the latter purpose, the Undernet implemented timestamps, new routing and offered the CService\u2014a program that allowed users to register channels and then attempted to protect them from troublemakers. The first server list presented, from 15 February 1993, includes servers from USA, Canada, France, Croatia and Japan. On 15 August, the new user count record was set to 57 users.[13]\nIn May 1993, RFC 1459[7] was published and details a simple protocol for client/server operation, channels, one-to-one and one-to-many conversations.[13]  It is notable that a significant number of extensions like CTCP, colors and formats are not included in the protocol specifications, nor is character encoding,[18] which led various implementations of servers and clients to diverge. In fact, software implementation varied significantly from one network to the other, each network implementing their own policies and standards in their own code bases.\n\nDALnet fork[edit]\nDuring the summer of 1994, the Undernet was itself forked. The new network was called DALnet (named after its founder: dalvenjah), formed for better user service and more user and channel protections. One of the more significant changes in DALnet was use of longer nicknames (the original ircd limit being 9 letters). DALnet ircd modifications were made by Alexei \"Lefler\" Kosut. DALnet was thus based on the Undernet ircd server, although the DALnet pioneers were EFnet abandoners. According to James Ng, the initial DALnet people were \"ops in #StarTrek sick from the constant splits/lags/takeovers/etc\".[13]\nDALnet quickly offered global WallOps (IRCop messages that can be seen by users who are +w (/mode NickName +w)), longer nicknames, Q:Lined nicknames (nicknames that cannot be used i.e. ChanServ, IRCop, NickServ, etc.), global K:Lines (ban of one person or an entire domain from a server or the entire network), IRCop only communications: GlobOps, +H mode showing that an IRCop is a \"helpop\" etc. Much of DALnet's new functions were written in early 1995 by Brian \"Morpher\" Smith and allow users to own nicknames, control channels, send memos, and more.[13]\n\nIRCnet fork[edit]\nIn July 1996, after months of flame wars and discussions on the mailing list, there was yet another split due to disagreement in how the development of the ircd should evolve. Most notably, the \"European\" (most of those servers were in Europe) side that later named itself IRCnet argued for nick and channel delays whereas the EFnet side argued for timestamps.[13] There were also disagreements about policies: the European side had started to establish a set of rules directing what IRCops could and could not do, a point of view opposed by the US side.[19]\nMost (not all) of the IRCnet servers were in Europe, while most of the EFnet servers were in the US. This event is also known as \"The Great Split\" in many IRC societies. EFnet has since (as of August 1998) grown and passed the number of users it had then. In the (northern) autumn of the year 2000, EFnet had some 50,000 users and IRCnet 70,000.[13]\n\nModern IRC[edit]\nIRC has changed much over its life on the Internet. New server software has added a multitude of new features.\n\nServices: Network-operated bots to facilitate registration of nicknames and channels, sending messages for offline users and network operator functions.\nExtra modes: While the original IRC system used a set of standard user and channel modes, new servers add many new modes for features such as removing color codes from text,[20] or obscuring a user's hostmask (\"cloaking\") to protect from denial-of-service attacks.[21]\nProxy detection: Most modern servers support detection of users attempting to connect through an insecure (misconfigured or exploited) proxy server, which can then be denied a connection. This proxy detection software is used by several networks, although that real time list of proxies is defunct since early 2006.[22]\nAdditional commands: New commands can be such things as shorthand commands to issue commands to Services, to network-operator-only commands to manipulate a user's hostmask.[citation needed]\nEncryption: For the client-to-server leg of the connection TLS might be used (messages cease to be secure once they are relayed to other users on standard connections, but it makes eavesdropping on or wiretapping an individual's IRC sessions difficult). For client-to-client communication, SDCC (Secure DCC) can be used.[citation needed]\nConnection protocol: IRC can be connected to via IPv4, the old version of the Internet Protocol, or by IPv6, the current standard of the protocol.\nAs of 2016, a new standardization effort is under way under a working group called IRCv3, which focuses on more advanced client features like instant notifications, better history support and improved security.[23] As of 2019, no major IRC networks have fully adopted the proposed standard.[24]\nAfter its golden era during the 1990s and early 2000s (240,000 users on QuakeNet in 2004), IRC has seen a significant decline, losing around 60% of users between 2003 and 2012, with users moving to newer social media platforms like Facebook or Twitter,[2] but also to open platforms like XMPP which was developed in 1999. Certain networks like Freenode have not followed the overall trend and have more than quadrupled in size during the same period.[2] However, Freenode, which in 2016 had around 90,000 users, has since declined to about 65,000 users.[25]\nThe largest IRC networks have traditionally been grouped as the \"Big Four\"[26][27][28][29]\u2014a designation for networks that top the statistics. The Big Four networks change periodically, but due to the community nature of IRC there are a large number of other networks for users to choose from.\nHistorically the \"Big Four\" were:[26][27][28]\n\nEFnet\nIRCnet\nUndernet\nDALnet\nIRC reached 6 million simultaneous users in 2001 and 10 million users in 2003, dropping to 371k in 2018.[citation needed]\nAs of October 2018, the largest IRC networks are:\n\nfreenode\u00a0\u2013 around 90k users at peak hours\nIRCnet\u00a0\u2013 around 30k users at peak hours\nEFnet\u00a0\u2013 around 18k users at peak hours\nUndernet\u00a0\u2013 around 17k users at peak hours\nQuakeNet\u00a0\u2013 around 15k users at peak hours\nRizon\u00a0\u2013 around 14k users at peak hours\nOFTC\u00a0\u2013 around 13k users at peak hours\nDALnet\u00a0\u2013 around 8k users at peak hours\nToday, the top 100 IRC networks have around 370k users connected at peak hours.[30] \n\nTimeline[edit]\nTimeline of major servers:\n\nEFnet, 1990 to present\nUndernet, 1992 to present\nDALnet, 1994 to present\nfreenode, 1995 to present\nIRCnet, 1996 to present\nQuakeNet, 1997 to present\nOpen and Free Technology Community, 2001 to present\nRizon, 2002 to present\nLibera Chat, 2021 to present\nTechnical information[edit]\n\nA screenshot of HexChat, an IRC client for GTK environments.\nXaric, a text-based IRC client, in use on Mac OS X. Shown are two IRC channels and a private conversation with the software author.\nIRC is an open protocol that uses TCP[7] and, optionally, TLS. An IRC server can connect to other IRC servers to expand the IRC network.[31] Users access IRC networks by connecting a client to a server.[32] There are many client implementations, such as mIRC, HexChat and irssi, and server implementations, e.g. the original IRCd. Most IRC servers do not require users to register an account but a nick is required before being connected.[33]\nIRC was originally a plain text protocol[7] (although later extended), which on request was assigned port 194/TCP by IANA.[34] However, the de facto standard has always been to run IRC on 6667/TCP[35] and nearby port numbers (for example TCP ports 6660\u20136669, 7000)[36] to avoid having to run the IRCd software with root privileges.\nThe protocol specified that characters were 8-bit but did not specify the character encoding the text was supposed to use.[18] This can cause problems when users using different clients and/or different platforms want to converse.\nAll client-to-server IRC protocols in use today are descended from the protocol implemented in the irc2.4.0 version of the IRC2 server, and documented in RFC 1459. Since RFC 1459 was published, the new features in the irc2.10 implementation led to the publication of several revised protocol documents (RFC 2810, RFC 2811, RFC 2812 and RFC 2813); however, these protocol changes have not been widely adopted among other implementations.[citation needed]\nAlthough many specifications on the IRC protocol have been published, there is no official specification, as the protocol remains dynamic. Virtually no clients and very few servers rely strictly on the above RFCs as a reference.[citation needed]\nMicrosoft made an extension for IRC in 1998 via the proprietary IRCX.[37] They later stopped distributing software supporting IRCX, instead developing the proprietary MSNP.\nThe standard structure of a network of IRC servers is a tree.[38] Messages are routed along only necessary branches of the tree but network state is sent to every server[39] and there is generally a high degree of implicit trust between servers. However, this architecture has a number of problems. A misbehaving or malicious server can cause major damage to the network[40] and any changes in structure, whether intentional or a result of conditions on the underlying network, require a net-split and net-join. This results in a lot of network traffic and spurious quit/join messages to users[41] and temporary loss of communication to users on the splitting servers. Adding a server to a large network means a large background bandwidth load on the network and a large memory load on the server. Once established, however, each message to multiple recipients is delivered in a fashion similar to multicast, meaning each message travels a network link exactly once.[42] This is a strength in comparison to non-multicasting protocols such as Simple Mail Transfer Protocol (SMTP)[citation needed] or Extensible Messaging and Presence Protocol (XMPP)[citation needed].\nAn IRC daemon can also be used on a local area network (LAN). IRC can thus be used to facilitate communication between people within the local area network (internal communication).[43][44]\n\nCommands and replies[edit]\n\nIRC has a line-based structure. Clients send single-line messages to the server,[45] receive replies to those messages[46] and receive copies of some messages sent by other clients. In most clients, users can enter commands by prefixing them with a '/'. Depending on the command, these may either be handled entirely by the client, or (generally for commands the client does not recognize) passed directly to the server, possibly with some modification.[citation needed]\nDue to the nature of the protocol, automated systems cannot always correctly pair a sent command with its reply with full reliability and are subject to guessing.[47]\n\nChannels[edit]\nThe basic means of communicating to a group of users in an established IRC session is through a channel.[48] Channels on a network can be displayed using the IRC command LIST,[49] which lists all currently available channels that do not have the modes +s or +p set, on that particular network.\nUsers can join a channel using the JOIN command,[50] in most clients available as /join #channelname. Messages sent to the joined channels are then relayed to all other users.[48]\nChannels that are available across an entire IRC network are prefixed with a '#', while those local to a server use '&'.[51] Other less common channel types include '+' channels\u2014'modeless' channels without operators[52]\u2014and '!' channels, a form of timestamped channel on normally non-timestamped networks.[53]\n\nModes[edit]\nUsers and channels may have modes that are represented by single case-sensitive letters[54] and are set using the MODE command.[55] User modes and channel modes are separate and can use the same letter to mean different things (e.g. user mode \"i\" is invisible mode while channel mode \"i\" is invite only.[56]) Modes are usually set and unset using the mode command that takes a target (user or channel), a set of modes to set (+) or unset (-) and any parameters the modes need.\nSome channel modes take parameters and other channel modes apply to a user on a channel or add or remove a mask (e.g. a ban mask) from a list associated with the channel rather than applying to the channel as a whole.[57] Modes that apply to users on a channel have an associated symbol that is used to represent the mode in names replies[58] (sent to clients on first joining a channel[50] and use of the names command) and in many clients also used to represent it in the client's displayed list of users in a channel or to display an own indicator for a user's modes.\nIn order to correctly parse incoming mode messages and track channel state the client must know which mode is of which type and for the modes that apply to a user on a channel which symbol goes with which letter. In early implementations of IRC this had to be hard-coded in the client but there is now a de facto standard extension to the protocol called ISUPPORT that sends this information to the client at connect time using numeric 005.[59][60]\nThere is a small design fault in IRC regarding modes that apply to users on channels: the names message used to establish initial channel state can only send one such mode per user on the channel,[58] but multiple such modes can be set on a single user. For example, if a user holds both operator status (+o) and voice status (+v) on a channel, a new client will be unable to see the mode with less priority (i.e. voice). Workarounds for this are possible on both the client and server side but none are widely implemented.\n\nStandard (RFC 1459) modes[edit]\n\nUser modes\n\n\nLetter\n\nSymbol\n\nDescription\n\n\ni\n\n\n\nInvisible\u2014cannot be seen without a common channel or knowing the exact name\n\n\ns\n\n\n\nReceives server notices\n\n\nw\n\n\n\nReceives wallops[61]\n\n\no\n\n\n\nUser is an IRC operator (ircop)\n\n\nChannel modes\n\n\nLetter\n\nSymbol\n\nParameter(s)\n\nDescription\n\n\no\n\n@\n\nName of affected user\n\nChannel operator\u2014can change channel modes and kick users out of the channel among other things\n\n\ns\n\n\n\n\n\nSecret channel\u2014not shown in channel list or user whois except to users already on the channel\n\n\np\n\n\n\n\n\nPrivate channel\u2014listed in channel list as \"prv\" according to RFC 1459\n\n\nn\n\n\n\n\n\nUsers cannot send messages to the channel externally\n\n\nm\n\n\n\n\n\nChannel is moderated (only those who hold channel operator or voice status on the channel can send messages to it)\n\n\ni\n\n\n\n\n\nOnly users with invites may enter the channel.\n\n\nt\n\n\n\n\n\nOnly channel operators can change the channel topic.\n\n\nl\n\n\n\nLimit number\n\nLimits number of users able to be on channel (when full, no new users can join)\n\n\nb\n\n\n\nBan mask (nick!user@host with wildcards allowed)\n\nBans hostmasks from channel\n\n\nv\n\n+\n\nName of affected user\n\nGives a user voice status on channel (see +m above)\n\n\nk\n\n\n\nNew channel key\n\nSets a channel key such that only users knowing the key can enter\n\nMany daemons and networks have added extra modes or modified the behavior of modes in the above list.[62][63][64][65]\n\nChannel operators[edit]\nA channel operator is a client on an IRC channel that manages the channel.\nIRC channel operators can be easily seen by the a symbol or icon next to their name (varies by client implementation, commonly a \"@\" symbol prefix, a green circle, or a Latin letter \"+o\"/\"o\").\nOn most networks, an operator can:\n\nKick a user\nBan a user\nGive another user IRC Channel Operator Status or IRC Channel Voice Status.\nChange the IRC Channel topic while channel mode +t is set.\nChange the IRC Channel Mode locks.\nIRC operators[edit]\n\nThere are also users who maintain elevated rights on their local server, or the entire network; these are called IRC operators,[66] sometimes shortened to IRCops or Opers (not to be confused with channel operators). As the implementation of the IRCd varies, so do the privileges of the IRC operator on the given IRCd. RFC 1459[66] claims that IRC operators are \"a necessary evil\" to keep a clean state of the network, and as such they need to be able to disconnect and reconnect servers. Additionally, to prevent malicious users or even harmful automated programs from entering IRC, IRC operators are usually allowed to disconnect clients and completely ban IP addresses or complete subnets. Networks that carry services (NickServ et al.) usually allow their IRC operators also to handle basic \"ownership\" matters. Further privileged rights may include overriding channel bans (being able to join channels they would not be allowed to join, if they were not opered), being able to op themselves on channels where they would not be able without being opered, being auto-opped on channels always and so forth.\n\nHostmasks[edit]\nA hostmask is a unique identifier of an IRC client connected to an IRC server.[67][68] IRC servers, services, and other clients, including bots, can use it to identify a specific IRC session.\nThe format of a hostmask is nick!user@host.  The hostmask looks similar to, but should not be confused with an e-mail address.\nThe nick part is the nickname chosen by the user and may be changed while connected.\nThe user part is the username reported by ident on the client.[69] If ident is not available on the client, the username specified when the client connected is used after being prefixed with a tilde.[70]\nThe host part is the hostname the client is connecting from. If the IP address of the client cannot be resolved to a valid hostname by the server, it is used instead of the hostname.\nBecause of the privacy implications of exposing the IP address or hostname of a client, some IRC daemons also provide privacy features, such as InspIRCd or UnrealIRCd's \"+x\" mode. This hashes a client IP address or masks part of a client's hostname, making it unreadable to users other than IRCops. Users may also have the option of requesting a \"virtual host\" (or \"vhost\"), to be displayed in the hostmask to allow further anonymity. Some IRC networks such as Freenode use these as \"cloaks\" to indicate that a user is affiliated with a group or project.[71]\n\nURI scheme[edit]\nThere are three recognized uniform resource identifier (URI) schemes for Internet Relay Chat: irc, ircs, and irc6.[72] When supported, they allow hyperlinks of various forms, including\n\nirc://<host>[:<port>]/[<channel>[?<channel_keyword>]]\nircs://<host>[:<port>]/[<channel>[?<channel_keyword>]]\nirc6://<host>[:<port>]/[<channel>[?<channel_keyword>]]\n\n(where items enclosed within brackets ([,]) are optional) to be used to (if necessary) connect to the specified host (or network, if known to the IRC client) and join the specified channel.[73] (This can be used within the client itself, or from another application such as a Web browser).  irc is the default URI, irc6 specifies a connection to be made using IPv6, and ircs specifies a secure connection.\nPer the specification, the usual hash symbol (#) will be prepended to channel names that begin with an alphanumeric character\u2014allowing it to be omitted. Some implementations (for example, mIRC) will do so unconditionally resulting in a (usually unintended) extra (for example, ##channel), if included in the URL.\nSome implementations allow multiple channels to be specified, separated by commas.[74]\n\nChallenges[edit]\nIssues in the original design of IRC were the amount of shared state data[75][76] being a limitation on its scalability,[77] the absence of unique user identifications leading to the nickname collision problem,[78] lack of protection from netsplits by means of cyclic routing,[79][80] the trade-off in scalability for the sake of real-time user presence information,[81] protocol weaknesses providing a platform for abuse,[82] no transparent and optimizable message passing,[83] and no encryption.[84] Some of these issues have been addressed in Modern IRC.\n\nAttacks[edit]\nBecause IRC connections may be unencrypted and typically span long time periods, they are an attractive target for DoS/DDoS attackers and hackers. Because of this, careful security policy is necessary to ensure that an IRC network is not susceptible to an attack such as a takeover war. IRC networks may also K-line or G-line users or servers that have a harming effect.\nSome IRC servers support SSL/TLS connections for security purposes. This helps stop the use of packet sniffer programs to obtain the passwords of IRC users, but has little use beyond this scope due to the public nature of IRC channels. SSL connections require both client and server support (that may require the user to install SSL binaries and IRC client specific patches or modules on their computers). Some networks also use SSL for server-to-server connections, and provide a special channel flag (such as +S) to only allow SSL-connected users on the channel, while disallowing operator identification in clear text, to better utilize the advantages that SSL provides.[85][86]\nIRC served as an early laboratory for many kinds of Internet attacks, such as using fake ICMP unreachable messages to break TCP-based IRC connections (nuking) to annoy users or facilitate takeovers.\n\nAbuse prevention[edit]\nOne of the most contentious technical issues surrounding IRC implementations, which survives to this day, is the merit of \"Nick/Channel Delay\" vs. \"Timestamp\" protocols. Both methods exist to solve the problem of denial-of-service attacks, but take very different approaches.\nThe problem with the original IRC protocol as implemented was that when two servers split and rejoined, the two sides of the network would simply merge their channels. If a user could join on a \"split\" server, where a channel that existed on the other side of the network was empty, and gain operator status, they would become a channel operator of the \"combined\" channel after the netsplit ended; if a user took a nickname that existed on the other side of the network, the server would kill both users when rejoining (i.e., 'nick-collision').\nThis was often abused to \"mass-kill\" all users on a channel, thus creating \"opless\" channels where no operators were present to deal with abuse. Apart from causing problems within IRC, this encouraged people to conduct denial-of-service attacks against IRC servers in order to cause netsplits, which they would then abuse.\n\nThe nick delay (ND) and channel delay (CD) strategies aim to prevent abuse by delaying reconnections and renames. After a user signs off and the nickname becomes available, or a channel ceases to exist because all its users parted (as often happens during a netsplit), the server will not allow any user to use that nickname or join that channel, until a certain period of time (the delay) has passed. The idea behind this is that even if a netsplit occurs, it is useless to an abuser because they cannot take the nickname or gain operator status on a channel, and thus no collision of a nickname or 'merging' of a channel can occur. To some extent, this inconveniences legitimate users, who might be forced to briefly use a different name after rejoining (appending an underscore is popular).\nThe timestamp protocol is an alternative to nick/channel delays which resolves collisions using timestamped priority. Every nickname and channel on the network is assigned a timestamp\u00a0\u2013 the date and time when it was created. When a netsplit occurs, two users on each side are free to use the same nickname or channel, but when the two sides are joined, only one can survive. In the case of nicknames, the newer user, according to their TS, is killed; when a channel collides, the members (users on the channel) are merged, but the channel operators on the \"losing\" side of the split lose their channel operator status.\nTS is a much more complicated protocol than ND/CD, both in design and implementation, and despite having gone through several revisions, some implementations still have problems with \"desyncs\" (where two servers on the same network disagree about the current state of the network), and allowing too much leniency in what was allowed by the 'losing' side. Under the original TS protocols, for example, there was no protection against users setting bans or other modes in the losing channel that would then be merged when the split rejoined, even though the users who had set those modes lost their channel operator status. Some modern TS-based IRC servers have also incorporated some form of ND and/or CD in addition to timestamping in an attempt to further curb abuse.\nMost networks today use the timestamping approach. The timestamp versus ND/CD disagreements caused several servers to split away from EFnet and form the newer IRCnet. After the split, EFnet moved to a TS protocol, while IRCnet used ND/CD.\nIn recent versions of the IRCnet ircd, as well as ircds using the TS6 protocol (including Charybdis), ND has been extended/replaced by a mechanism called SAVE. This mechanism assigns every client a UID upon connecting to an IRC server. This ID starts with a number, which is forbidden in nicks (although some ircds, namely IRCnet and InspIRCd, allow clients to switch to their own UID as the nickname).\nIf two clients with the same nickname join from different sides of a netsplit (\"nick collision\"), the first server to see this collision will force both clients to change their nick to their UID, thus saving both clients from being disconnected. On IRCnet, the nickname will also be locked for some time (ND) to prevent both clients from changing back to the original nickname, thus colliding again.\n\nClients[edit]\nClient software[edit]\n\n\nClient software exists for various operating systems or software packages, as well as web-based or inside games. Many different clients are available for the various operating systems, including Windows, Unix and Linux, macOS and mobile operating systems (such as iOS and Android). On Windows, mIRC is one of the most popular clients.[87]\nSome programs which are extensible through plug-ins also serve as platforms for IRC clients. For instance, a client called ERC, written entirely in Emacs Lisp, is included in v.22.3 of Emacs. Therefore, any platform that can run Emacs can run ERC.\nA number of web browsers have built-in IRC clients, such as Opera (version 12.18 and earlier)[88] and the ChatZilla add-on for Mozilla Firefox (for Firefox 56 and earlier; included as a built-in component of SeaMonkey). Web-based clients, such as Mibbit and open source KiwiIRC, can run in most browsers.\nGames such as War\u00a7ow,[89] Unreal Tournament (up to Unreal Tournament 2004),[90] Uplink,[91] Spring Engine-based games, 0 A.D. and ZDaemon have included IRC.[92]\nUstream's chat interface is IRC with custom authentication[93] as well as Twitch's (formerly Justin.tv).[94][95]\n\nBots[edit]\n\nA typical use of bots in IRC is to provide IRC services or specific functionality within a channel such as to host a chat-based game or provide notifications of external events. However, some IRC bots are used to launch malicious attacks such as denial of service, spamming, or exploitation.[96]\n\nBouncer[edit]\n\nA program that runs as a daemon on a server and functions as a persistent proxy is known as a BNC or bouncer. The purpose is to maintain a connection to an IRC server, acting as a relay between the server and client, or simply to act as a proxy.[citation needed] Should the client lose network connectivity, the BNC may stay connected and archive all traffic for later delivery, allowing the user to resume their IRC session without disrupting their connection to the server.[97]\nFurthermore, as a way of obtaining a bouncer-like effect, an IRC client (typically text-based, for example Irssi) may be run on an always-on server to which the user connects via ssh. This also allows devices that only have ssh functionality, but no actual IRC client installed themselves, to connect to the IRC, and it allows sharing of IRC sessions.[98]\nTo keep the IRC client from quitting when the ssh connection closes, the client can be run inside a terminal multiplexer such as GNU Screen or tmux, thus staying connected to the IRC network(s) constantly and able to log conversation in channels that the user is interested in, or to maintain a channel's presence on the network. Modelled after this setup, in 2004 an IRC client following the client\u2013server, called Smuxi, was launched.[99][100]\n\nSearch engines[edit]\nThere are numerous search engines available to aid the user in finding what they are looking for on IRC.[101][102] Generally the search engine consists of two parts, a \"back-end\" (or \"spider/crawler\") and a front-end \"search engine\".\nThe back-end (spider/webcrawler) is the work horse of the search engine. It is responsible for crawling IRC servers to index the information being sent across them. The information that is indexed usually consists solely of channel text (text that is publicly displayed in public channels). The storage method is usually some sort of relational database, like MySQL or Oracle.[citation needed]\nThe front-end \"search engine\" is the user interface to the database. It supplies users with a way to search the database of indexed information to retrieve the data they are looking for. These front-end search engines can also be coded in numerous programming languages.\nMost search engines have their own spider that is a single application responsible for crawling IRC and indexing data itself; however, others are \"user based\" indexers. The latter rely on users to install their \"add-on\" to their IRC client; the add-on is what sends the database the channel information of whatever channels the user happens to be on.[citation needed]\nMany users have implemented their own ad hoc search engines using the logging features built into many IRC clients. These search engines are usually implemented as bots and dedicated to a particular channel or group of associated channels.\n\nCharacter encoding[edit]\nIRC still lacks a single globally accepted standard convention for how to transmit characters outside the 7-bit ASCII repertoire.\nIRC servers normally[clarification needed] transfer messages from a client to another client just as byte sequences, without any interpretation or recoding of characters. The IRC protocol (unlike e.g. MIME or HTTP) lacks mechanisms for announcing and negotiating character encoding options. This has put the responsibility for choosing the appropriate character codec on the client. In practice, IRC channels have largely used the same character encodings that were also used by operating systems (in particular Unix derivatives) in the respective language communities:\n\n7-bit era: In the early days of IRC, especially among Scandinavian and Finnish language users, national variants of ISO 646 were the dominant character encodings. These encode non-ASCII characters like \u00c4 \u00d6 \u00c5 \u00e4 \u00f6 \u00e5 at code positions 0x5B 0x5C 0x5D 0x7B 0x7C 0x7D (US-ASCII: [ \\ ] { | }). That is why these codes are always allowed in nicknames. According to RFC 1459, { | } in nicknames should be treated as lowercase equivalents of [ \\ ] respectively.[18] By the late 1990s, the use of 7-bit encodings had disappeared in favour of ISO 8859-1, and such equivalence mappings were dropped from some IRC daemons.\n8-bit era: Since the early 1990s, 8-bit encodings such as ISO 8859-1 have become commonly used for European languages. Russian users had a choice of KOI8-R, ISO 8859-5[citation needed] and CP1251, and since about 2000, modern Russian IRC networks convert between these different commonly used encodings of the Cyrillic script.\nMulti-byte era: For a long time, East Asian IRC channels with logographic scripts in China, Japan, and Korea have been using multi-byte encodings such as EUC or ISO-2022-JP. With the common migration from ISO 8859 to UTF-8 on Linux and Unix platforms since about 2002, UTF-8 has become an increasingly popular substitute for many of the previously used 8-bit encodings in European channels. Some IRC clients are now capable of reading messages both in ISO 8859-1 or UTF-8 in the same channel, heuristically autodetecting which encoding is used. The shift to UTF-8 began in particular on Finnish-speaking IRC (Merkist\u00f6 (Finnish)).\nToday, the UTF-8 encoding of Unicode/ISO 10646 would be the most likely contender for a single future standard character encoding for all IRC communication, if such standard ever relaxed the 510-byte message size restriction. UTF-8 is ASCII compatible and covers the superset of all other commonly used coded character set standards.\n\nFile sharing[edit]\nMuch like conventional P2P file sharing, users can create file servers that allow them to share files with each other by using customised IRC bots or scripts for their IRC client. Often users will group together to distribute warez via a network of IRC bots.[103]\nTechnically, IRC provides no file transfer mechanisms itself; file sharing is implemented by IRC clients, typically using the Direct Client-to-Client (DCC) protocol, in which file transfers are negotiated through the exchange of private messages between clients. The vast majority of IRC clients feature support for DCC file transfers, hence the view that file sharing is an integral feature of IRC.[104] The commonplace usage of this protocol, however, sometimes also causes DCC spam. DCC commands have also been used to exploit vulnerable clients into performing an action such as disconnecting from the server or exiting the client.\n\nSee also[edit]\nChat room\nClient-to-client protocol\nComparison of instant messaging protocols\nComparison of IRC clients\nComparison of mobile IRC clients\nThe Hamnet Players\nInternet slang\nList of IRC commands\nServing channel\nMatrix (protocol) and XMPP, similar chat protocols\nCitations[edit]\n\n^ Jarkko Oikarinen, Darren Reed. \"RFC 1459, Internet Relay Chat Protocol,\" May 1993. Accessed 12 June 2021.\n\n^ Jump up to: a b c \"IRC is dead, long live IRC\". Pingdom. 24 April 2012. Retrieved 25 April 2016.\n\n^ Jump up to: a b c \"IRC Networks \u2013 Top 100\". irc.netsplit.de. Retrieved 8 April 2011.\n\n^ \"IRC Servers \u2013 Summary\". irc.netsplit.de. Archived from the original on 22 April 2011. Retrieved 8 April 2011.\n\n^ \"IRC Networks - in alphabetical order\", 2020, netsplit.de. Accessed 12 June 2021.\n\n^ \"IRC Networks - Top 100\", 2020, netsplit.de. Accessed 12 June 2021.\n\n^ Jump up to: a b c d \"Introduction\". Internet Relay Chat Protocol. p.\u00a04.\u00a0sec.\u00a01. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"One-to-many\". Internet Relay Chat Protocol. p.\u00a011.\u00a0sec.\u00a03.2. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"One-To-One Communication\". Internet Relay Chat: Architecture. p.\u00a05.\u00a0sec.\u00a05.1. doi:10.17487/RFC2810. RFC 2810.\n\n^ Rollo, Troy. \"A description of the DCC protocol\". irchelp.org. Retrieved 8 April 2011.\n\n^ Wang, Wallace (25 October 2004). \"Instant Messaging and Online Chat Rooms: Internet Relay Chat (IRC)\". Steal this File Sharing Book (1st\u00a0ed.). San Francisco, California: No Starch Press. pp.\u00a061\u201367. ISBN\u00a0978-1-59327-050-6.\n\n^ \"SAGE IRC Channel\". Sage \u2013 The USENIX Special Interest Group for Sysadmins. Archived from the original on 7 February 2012. Retrieved 18 April 2011.\n\n^ Jump up to: a b c d e f g h i j k Stenberg, Daniel (29 March 2011). \"History of IRC (Internet Relay Chat)\". Retrieved 25 April 2016. I did not experience all of this. I found information on various places and I received information from various people in order to write this. People that have helped me with this include: Greg \"wumpus\" Lindahl, Vesa \"vesa\" Ruokonen, James Ng, Tuomas Heino, Richard (eagle`s on undernet), Ari Lemmke\n\n^ Oikarinen, Jarkko. \"Founding IRC\". Retrieved 8 April 2011.\n\n^ \"IRC transcripts from the time of the 1991 Soviet coup d'\u00e9tat attempt\". Chapel Hill, North Carolina: ibiblio. Archived from the original on 28 June 2009. Retrieved 8 April 2011.\n\n^ \"IRC logs of events of the Gulf War\". Chapel Hill, North Carolina: ibiblio. Retrieved 8 April 2011.\n\n^ \"Logs of major events in the online community\". Chapel Hill, North Carolina: ibiblio. Retrieved 8 April 2011.\n\n^ Jump up to: a b c \"Character codes\". Internet Relay Chat Protocol. p.\u00a07.\u00a0sec.\u00a02.2. doi:10.17487/RFC1459. RFC 1459.\n\n^ Engen, Vegard (May 2000). \"The Great Split\". IRC.org. Retrieved 25 April 2016.\n\n^ \"Channel Modes\". UnrealIRCd documentation wiki. Retrieved 6 January 2018.\n\n^ \"Cloaking\". UnrealIRCd documentation wiki. Retrieved 6 January 2018.\n\n^ \"Blitzed Open Proxy Monitor Shuts Down\". The Open Proxy Monitor which has been provided by the Blitzed IRC network has been shut down\u2026The database was so large that it is near to impossible for the team to backup, or find a new location to continue the service. Added to that, most of the team members do not possess the time anymore to keep the service running.\n\n^ \"IRCv3\". IRCv3 Working Group. 2016. Retrieved 25 April 2016. The IRCv3 Working Group is a collection of IRC client and server software authors working to enhance, maintain and standardize the IRC protocol using backwards-compatible extensions.\n\n^ \"Networks - IRCv3\". 2019. Retrieved 9 August 2019.\n\n^ \"netsplit.de top 10\". Retrieved 12 June 2021.\n\n^ Jump up to: a b Charalabidis, Alex (15 December 1999). \"IRCing On The Macintosh: Ircle\". The Book of IRC: The Ultimate Guide to Internet Relay Chat (1st\u00a0ed.). San Francisco, California: No Starch Press. p.\u00a061. ISBN\u00a0978-1-886411-29-6. On large networks such as the Big Four\u2014 EFnet, IRCnet, Undernet, and DALnet\u2014 trying to list the thousands of channels with Ircle always causes you to disconnect due to the flood of information, while other clients can usually manage the feat, if you are on a direct Ethernet connection.\n\n^ Jump up to: a b Jones, Steve, ed. (10 December 2002). \"Internet Relay Chat\". Encyclopedia of New Media: An Essential Reference to Communication and Technology (1st\u00a0ed.). Thousand Oaks, California: SAGE Publications. p.\u00a0257. ISBN\u00a0978-0-7619-2382-4. Today there are hundreds of independent IRC networks, but the \"Big Four\" are EFNet, UnderNet, Dalnet, and IRCnet.\n\n^ Jump up to: a b Rittner, Don (3 March 1999). The iMac Book (1st\u00a0ed.). Scottsdale, Arizona: Coriolis Group. p.\u00a0215. ISBN\u00a0978-1-57610-429-3. There are several large networks: EFnet, UnderNET, DALnet, and IRCnet make up the Big Four.\n\n^ Turban, Efraim; Leidner, Dorothy; McLean, Ephraim; Wetherbe, James (7 February 2005). \"Communication\". Information Technology for Management: Transforming Organizations in the Digital Economy (5th\u00a0ed.). Hoboken, New Jersey: John Wiley & Sons. pp.\u00a0106\u2013107. ISBN\u00a0978-0-471-70522-2. The largest networks have traditionally been grouped as the \"Big Four\": EFNet, IrcNet, QuakeNet, and UnderNet.\n\n^ \"IRC Networks\u00a0\u2013 Top 100\". irc.netsplit.de. netsplit.de. Retrieved 29 October 2018.\n\n^ \"Servers\". Internet Relay Chat Protocol. p.\u00a04.\u00a0sec.\u00a01.1. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"Clients\". Internet Relay Chat: Architecture. p.\u00a03.\u00a0sec.\u00a02.2. doi:10.17487/RFC2810. RFC 2810.\n\n^ \"Clients\". Internet Relay Chat Protocol. p.\u00a05.\u00a0sec.\u00a01.2. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"Port Numbers\". Marina del Rey, California: Internet Assigned Numbers Authority. 6 April 2011. Retrieved 5 April 2021.\n\n^ \"Connect message\". Internet Relay Chat Protocol. p.\u00a029.\u00a0sec.\u00a04.3.5. doi:10.17487/RFC1459. RFC 1459.\n\n^ Lucas, Mark; Singh, Abhishek; Cantrell, Chris (5 October 2006). \"Defining a Firewall\".  In Henmi, Anne (ed.). Firewall Policies and VPN Configurations. Rockland, Massachusetts: Syngress Publishing. p.\u00a093. ISBN\u00a0978-1-59749-088-7.\n\n^ Abraham, Dalen (June 1998). Extensions to the Internet Relay Chat Protocol (IRCX). IETF. I-D draft-pfenning-irc-extensions-04. Retrieved 8 April 2011.\n\n^ \"Architecture\". Internet Relay Chat: Architecture. pp.\u00a03 \u2013 4.\u00a0sec.\u00a03. doi:10.17487/RFC2810. RFC 2810.\n\n^ \"Introduction\". Internet Relay Chat: Architecture. p.\u00a02.\u00a0sec.\u00a01. doi:10.17487/RFC2810. RFC 2810.\n\n^ \"Algorithms\". Internet Relay Chat Protocol. p.\u00a064.\u00a0sec.\u00a09.3. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"Network Congestion\". Internet Relay Chat: Architecture. pp.\u00a07 \u2013 8.\u00a0sec.\u00a06.3. doi:10.17487/RFC2810. RFC 2810.\n\n^ \"To A Channel\". Internet Relay Chat: Architecture. pp.\u00a05 \u2013 6.\u00a0sec.\u00a05.2.1. doi:10.17487/RFC2810. RFC 2810.\n\n^ \"IRC daemons for LAN\". Retrieved 2 October 2014.\n\n^ \"Running an own IRC server\". Retrieved 2 October 2014.\n\n^ \"Message format in 'pseudo' BNF\". Internet Relay Chat Protocol. p.\u00a08.\u00a0sec.\u00a02.3.1. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"Numeric replies\". Internet Relay Chat Protocol. p.\u00a010.\u00a0sec.\u00a02.4. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"IRC List Modes \u2013 List mode extension showing pair confusion for lists\". 25 November 2009. Retrieved 8 April 2011.\n\n^ Jump up to: a b \"To a group (channel)\". Internet Relay Chat Protocol. p.\u00a011.\u00a0sec.\u00a03.2.2. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"List message\". Internet Relay Chat Protocol. p.\u00a024.\u00a0sec.\u00a04.2.6. doi:10.17487/RFC1459. RFC 1459.\n\n^ Jump up to: a b \"Join message\". Internet Relay Chat Protocol. p.\u00a019.\u00a0sec.\u00a04.2.1. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"Channel Scope\". Internet Relay Chat: Channel Management. pp.\u00a03 \u2013 4.\u00a0sec.\u00a02.2. doi:10.17487/RFC2811. RFC 2811.\n\n^ \"Channel Properties\". Internet Relay Chat: Channel Management. p.\u00a04.\u00a0sec.\u00a02.3. doi:10.17487/RFC2811. RFC 2811.\n\n^ \"Channel lifetime\". Internet Relay Chat: Channel Management. p.\u00a05.\u00a0sec.\u00a03. doi:10.17487/RFC2811. RFC 2811.\n\n^ \"Channel Modes\". Internet Relay Chat: Channel Management. p.\u00a07.\u00a0sec.\u00a04. doi:10.17487/RFC2811. RFC 2811.\n\n^ \"Mode message\". Internet Relay Chat Protocol. p.\u00a021.\u00a0sec.\u00a04.2.3. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"Channel modes\". Internet Relay Chat Protocol. pp.\u00a021 \u2013 22.\u00a0sec.\u00a04.2.3.1. doi:10.17487/RFC1459. RFC 1459.\n\n^ \"Channel Access Control\". Internet Relay Chat: Channel Management. pp.\u00a010 \u2013 11.\u00a0sec.\u00a04.3. doi:10.17487/RFC2811. RFC 2811.\n\n^ Jump up to: a b \"Command responses: 353 RPL_NAMREPLY\". Internet Relay Chat Protocol. p.\u00a051. doi:10.17487/RFC1459. RFC 1459.\n\n^ Roeckx, Kurt (14 October 2004). \"The 005 numeric: ISUPPORT\". irc.org. Retrieved 10 April 2011.\n\n^ Brocklesby, Edward (September 2002). IRC RPL_ISUPPORT Numeric Definition. IETF. I-D draft-brocklesby-irc-isupport-03. Retrieved 10 April 2011.\n\n^ \"Operwall message\". Internet Relay Chat Protocol. p.\u00a041.\u00a0sec.\u00a05.6. doi:10.17487/RFC1459. RFC 1459.\n\n^ Butcher, Simon (12 January 2005). \"IRC User Modes List\". alien.net.au. Retrieved 10 April 2011.\n\n^ Butcher, Simon (12 January 2005). \"IRC Channel Modes List\". alien.net.au. Retrieved 10 April 2011.\n\n^ Butcher, Simon (12 January 2005). \"IRC Server Modes List\". alien.net.au. Retrieved 10 April 2011.\n\n^ Olsen, Tommy. \"IRCd Modes\". webtoman.com. Archived from the original on 15 October 2011. Retrieved 10 April 2011.\n\n^ Jump up to: a b \"Operators\". Internet Relay Chat Protocol. p.\u00a05.\u00a0sec.\u00a01.2.1. doi:10.17487/RFC1459. RFC 1459.\n\n^ Thiedeke, Udo (23 September 2003). \"Nicola D\u00f6ring, Alexander Schestag\". Virtuelle Gruppen: Charakteristika und Problemdimensionen (in German) (2nd\u00a0ed.). Springer VS\u00a0[de]. pp.\u00a0314, 337. ISBN\u00a0978-3-531-33372-4. Retrieved 30 March 2010.\n\n^ Rogers, Russ (1 December 2004). \"The Mind of Terror\".  In Devost, Matthew G. (ed.). Hacking a Terror Network: The Silent Threat of Covert Channels (1st\u00a0ed.). Rockland, Massachusetts: Syngress Publishing. p.\u00a010. ISBN\u00a0978-1-928994-98-5. Retrieved 30 March 2010.\n\n^ Petersen, Julie K., ed. (29 May 2002). \"Internet Relay Chat\". The Telecommunications Illustrated Dictionary (2nd\u00a0ed.). CRC Press. p.\u00a0500. ISBN\u00a0978-0-8493-1173-4. Retrieved 30 March 2010.\n\n^ \"Frequently-Asked Questions\". freenode. Archived from the original on 26 March 2010. Retrieved 30 March 2010.\n\n^ \"IRC/Cloaks\". Meta-wiki. Retrieved 27 November 2011.\n\n^ \"Uniform Resource Identifier (URI) Schemes\". Internet Assigned Numbers Authority. Retrieved 14 October 2012.\n\n^ Butcher, Simon (January 2003). Uniform Resource Locator Schemes for Internet Relay Chat Entities. IETF. I-D draft-butcher-irc-url-04. Retrieved 10 April 2011.\n\n^ \"node-irc\". npm. Retrieved 30 July 2021.\n\n^ \"Size\". A Discussion on Computer Network Conferencing. pp.\u00a05 \u2013 6.\u00a0sec.\u00a02.5.1. doi:10.17487/RFC1324. RFC 1324.\n\n^ \"Scalability\". Internet Relay Chat: Architecture. p.\u00a07.\u00a0sec.\u00a06.1. doi:10.17487/RFC2810. RFC 2810.\n\n^ Loesch 2003 1.2.1 Growth\n\n^ \"User identification\". A Discussion on Computer Network Conferencing. p.\u00a010.\u00a0sec.\u00a05.4.1. doi:10.17487/RFC1324. RFC 1324.\n\n^ \"Trees and cycles\". A Discussion on Computer Network Conferencing. p.\u00a010.\u00a0sec.\u00a05.4.2. doi:10.17487/RFC1324. RFC 1324.\n\n^ Loesch 2003 1.2.2 Network failures\n\n^ \"State Information problems\". A Discussion on Computer Network Conferencing. p.\u00a04.\u00a0sec.\u00a02.1. doi:10.17487/RFC1324. RFC 1324.\n\n^ Loesch 2003 1.2.3 Sociological and security aspects\n\n^ \"Message passing\". A Discussion on Computer Network Conferencing. p.\u00a07.\u00a0sec.\u00a05.2.1. doi:10.17487/RFC1324. RFC 1324.\n\n^ \"Conference security\". A Discussion on Computer Network Conferencing. p.\u00a08.\u00a0sec.\u00a05.2.4. doi:10.17487/RFC1324. RFC 1324.\n\n^ \"Getting Help on EsperNet\". The EsperNet IRC Network. Retrieved 31 July 2012.\n\n^ brandon (18 May 2010). \"New Feature: SSL For Users\". DALnet. Retrieved 31 July 2012.\n\n^ Smith, Roderick W. (8 April 2000). \"The Internet: Using IRC to Get Help\". The Multi-Boot Configuration Handbook. Handbook Series. Upper Saddle River, New Jersey: Que Publishing. p.\u00a0289. ISBN\u00a0978-0-7897-2283-6. Retrieved 25 July 2010. mIRC is one of the most popular Windows IRC clients.\n\n^ \"Opera Browser Wiki: IRC Client\". Archived from the original on 17 March 2011. Retrieved 10 April 2011.\n\n^ \"Warsow Wiki: IRC Module\". Archived from the original on 25 April 2011. Retrieved 10 April 2011.\n\n^ Guenter, Daniel (21 June 2004). \"UT2004 Review\". BCCHardware. Retrieved 10 April 2011.\n\n^ \"The Ultimate Uplink Guide\". Retrieved 10 April 2011.\n\n^ \"ZDaemon \u2013 The Doom Wiki: Other utilities\". Retrieved 10 April 2011.\n\n^ \"How to setup [sic] an IRC client to connect and login [sic] to Ustream\". Ustream-Helpers. 29 January 2012. Retrieved 27 April 2013.\n\n^ Mauldor (20 June 2010). \"Ustream vs. Justin.tv\". LiquidSilver. Retrieved 13 July 2011.\n\n^ \"Twitch IRC\". Twitch Help Center. 7 April 2017. Retrieved 30 October 2017.\n\n^ Canavan, John. \"The Evolution of Malicious IRC Bots\" (PDF). www.symantec.com. Symantec Security Response.\n\n^ \"psyBNC Readme\". psybnc.at. Retrieved 10 April 2011.\n\n^ Carey, Chris (18 July 2009). \"IRC with irssi-proxy + screen\". chriscarey.com. Retrieved 10 April 2011.\n\n^ \"Detachable Frontend (Core Rewrite) / UML / Windows Port (kicking Glade)\". smuxi.org. 25 December 2004. Retrieved 25 July 2010.\n\n^ \"About Smuxi\". smuxi.org. Retrieved 10 April 2011.\n\n^ Mutton, Paul (27 July 2004). \"Users and Channels\". IRC Hacks (1st\u00a0ed.). Sebastopol, California: O'Reilly Media. pp.\u00a044\u201346. ISBN\u00a0978-0-596-00687-7.\n\n^ Wang, Wallace (25 October 2004). \"Instant Messaging and Online Chat Rooms: Internet Relay Chat (IRC)\". Steal this File Sharing Book (1st\u00a0ed.). San Francisco, California: No Starch Press. pp.\u00a065\u201367. ISBN\u00a0978-1-59327-050-6.\n\n^ Vamosi, Robert (8 May 2002). \"Pirated movies: Now playing on a server near you\". ZDNet. Retrieved 10 April 2011.\n\n^ Sasaki, Darla (4 April 2002). \"IRC 101: What Is It & How Do I Use It?\". Macobserver.com. Retrieved 10 April 2011.\n\n\nGeneral bibliography[edit]\nReed, Darren (May 1992). A Discussion on Computer Network Conferencing. IETF. doi:10.17487/RFC1324. RFC 1324. Retrieved 30 October 2009.\nOikarinen, Jarkko; Reed, Darren (May 1993). Internet Relay Chat Protocol. IETF. doi:10.17487/RFC1459. RFC 1459. Retrieved 30 October 2009.\nKalt, Christophe (April 2000). Internet Relay Chat: Architecture. IETF. doi:10.17487/RFC2810. RFC 2810. Retrieved 30 October 2009.\nKalt, Christophe (April 2000). Internet Relay Chat: Channel Management. IETF. doi:10.17487/RFC2811. RFC 2811. Retrieved 30 October 2009.\nLoesch, Carl (17 July 2003). \"Functionality Provided by Systems for Synchronous Conferencing\". psyc.eu. Retrieved 10 April 2011. \nFurther reading[edit]\nKalt, Christophe (April 2000). Internet Relay Chat: Client Protocol. IETF. doi:10.17487/RFC2812. RFC 2812. Retrieved 30 October 2009.\nKalt, Christophe (April 2000). Internet Relay Chat: Server Protocol. IETF. doi:10.17487/RFC2813. RFC 2813. Retrieved 30 October 2009.\n\"Logs of major events in the online community\". Chapel Hill, North Carolina: ibiblio. Retrieved 8 April 2011.\nButcher, Simon. \"IRC technical information\". alien.net.au. Retrieved 10 April 2011.\nExternal links[edit]\n\n\n\n\nWikimedia Commons has media related to IRC.\n\nIRC at Curlie\nIRC Numerics List\nHistory of IRC\nIRC.org \u2013 Technical and Historical IRC6 information; Articles on the history of IRC\nIRChelp.org \u2013 Internet Relay Chat (IRC) help archive; Large archive of IRC-related documents\nIRCv3 \u2013 Working group of developers, who add new features to the protocol and write specs for them\nIRC-Source \u2013 Internet Relay Chat (IRC) network and channel search engine with historical data\nirc.netsplit.de \u2013 Internet Relay Chat (IRC) network listing with historical data\n\n\n\n\n\n\n\n"
                ],
                "output": "readability",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632694375.886866",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-26T22:13:14.560931+00:00",
                "status": "succeeded"
            }
        ],
        "screenshot": [
            {
                "cmd": [
                    "chromium-browser",
                    "--headless",
                    "--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/{VERSION} (+https://github.com/ArchiveBox/ArchiveBox/)",
                    "--window-size=1440,2000",
                    "--timeout=90000",
                    "--screenshot",
                    "https://en.wikipedia.org/wiki/Internet_Relay_Chat"
                ],
                "cmd_version": "Chromium 93.0.4577.82",
                "end_ts": "2021-09-26T22:13:12.477799+00:00",
                "index_texts": null,
                "output": "screenshot.png",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632694375.886866",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-26T22:13:09.367907+00:00",
                "status": "succeeded"
            }
        ],
        "singlefile": [
            {
                "cmd": [
                    "/home/wesleyac/code/notebook/data/archivebox/node_modules/single-file/cli/single-file",
                    "--browser-executable-path=chromium-browser",
                    "--browser-args=[\"--headless\", \"--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/{VERSION} (+https://github.com/ArchiveBox/ArchiveBox/)\", \"--window-size=1440,2000\"]",
                    "https://en.wikipedia.org/wiki/Internet_Relay_Chat",
                    "singlefile.html"
                ],
                "cmd_version": "0.3.31",
                "end_ts": "2021-09-26T22:13:09.350524+00:00",
                "index_texts": null,
                "output": "singlefile.html",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632694375.886866",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-26T22:12:57.111193+00:00",
                "status": "succeeded"
            }
        ],
        "title": [
            {
                "cmd": [
                    "curl",
                    "--silent",
                    "--location",
                    "--compressed",
                    "--max-time",
                    "90",
                    "--user-agent",
                    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.61 Safari/537.36 ArchiveBox/0.6.2 (+https://github.com/ArchiveBox/ArchiveBox/) curl/curl 7.76.1 (x86_64-pc-linux-gnu)",
                    "https://en.wikipedia.org/wiki/Internet_Relay_Chat"
                ],
                "cmd_version": "curl 7.76.1 (x86_64-pc-linux-gnu)",
                "end_ts": "2021-09-26T22:12:56.701450+00:00",
                "index_texts": null,
                "output": "Internet Relay Chat - Wikipedia",
                "pwd": "/home/wesleyac/code/notebook/data/archivebox/archive/1632694375.886866",
                "schema": "ArchiveResult",
                "start_ts": "2021-09-26T22:12:56.214299+00:00",
                "status": "succeeded"
            }
        ],
        "wget": []
    },
    "icons": null,
    "is_archived": true,
    "is_static": false,
    "latest": {
        "archive_org": "https://web.archive.org/web/20210926221337/https://en.wikipedia.org/wiki/Internet_Relay_Chat",
        "dom": "output.html",
        "favicon": "favicon.ico",
        "git": null,
        "media": null,
        "pdf": null,
        "screenshot": "screenshot.png",
        "singlefile": "singlefile.html",
        "title": "Internet Relay Chat - Wikipedia",
        "warc": null,
        "wget": null
    },
    "link_dir": "/home/wesleyac/code/notebook/data/archivebox/archive/1632694375.886866",
    "newest_archive_date": "2021-09-26T22:13:35.789055+00:00",
    "num_failures": 0,
    "num_outputs": 9,
    "oldest_archive_date": "2021-09-26T22:12:56.214299+00:00",
    "path": "/wiki/Internet_Relay_Chat",
    "schema": "Link",
    "scheme": "https",
    "snapshot_id": "312adc60-59ed-4250-bbf4-62cb3e8758fa",
    "sources": [
        "/home/wesleyac/code/notebook/data/archivebox/sources/1632694375-import.txt"
    ],
    "tags": null,
    "tags_str": "",
    "timestamp": "1632694375.886866",
    "title": "Internet Relay Chat - Wikipedia",
    "updated": "2021-09-26T22:12:56.211954+00:00",
    "updated_date": "2021-09-26 22:12",
    "url": "https://en.wikipedia.org/wiki/Internet_Relay_Chat"
}