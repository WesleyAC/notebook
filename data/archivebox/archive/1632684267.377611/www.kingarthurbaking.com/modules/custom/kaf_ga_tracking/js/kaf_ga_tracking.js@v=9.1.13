(function ($, Drupal) {
  'use strict';

  Drupal.behaviors.kafGaTracking = {
    attach: function (context, settings) {
      var self = this;

      // What is there to track?
      var prodLists = [];
      for (var list in self.listData) {
        var listBox = self.listData[list].identifier || self.listData[list].wrapper;
        if ($(listBox, context).length) {
          prodLists.push(list);
        }
      }

      // Keeps this from generating a ton of console errors on local.
      window.dataLayer = window.dataLayer || [];

      prodLists.forEach(function(list) {
        self.trackProductList(list);
      });
    },

    trackProductList: function(list) {
      var self = this;
      var props = self.listData[list];

      var scrollCheck = window.setInterval(function () {
        let $wrapper = $(props.wrapper);
        var listTop = ($wrapper.length > 0) ? $wrapper.offset().top : 0;
        var listBottom = ($wrapper.length > 0) ? $wrapper.offset().top + $wrapper.height() : 0;
        if (window.scrollY > listTop - window.innerHeight && window.scrollY < listBottom) {
          if ($(props.entry).length > 0) {
            // Products are present and in view; push impressions.
            self.pushProductImpressions(self.constructProductArray($(props.entry), props));

            // Waiting to set these click handlers because of products not in page source.
            $(props.clickTarget).click(function (e) {
              self.pushProductClick(self.constructProductObj($(e.target).closest(props.entry), props));
            });

            if (props.addTarget) {
              $(props.addTarget).click(function (e) {
                self.pushProductAdd(self.constructProductObj($(e.target).closest(props.entry), props));
              });
            }

            if (props.ajaxMultipage) {
              // Lists with ajax page nav need new list tracking triggered for each page.
              $(props.paginationTarget).click(function() {
                self.trackProductList(list);
              });
            }

            // Cancel timer, impressions are done and handlers are set.
            window.clearInterval(scrollCheck);
          }
        }
      }, 300);

    },

    constructProductArray: function($products, listObj) {
      var self = this;
      var productArray = [];
      $products.each(function() {
        productArray.push(self.constructProductObj($(this), listObj));
      });
      return productArray;
    },

    constructProductObj: function($product, listObj) {
      var productObj = {};
      productObj.list = listObj.listname;
      var offset = 0;
      if (listObj.offset) { offset = listObj.offset($product); }
      productObj.position = offset + $product.index() + 1;
      productObj.quantity = 1;
      productObj.name = listObj.prodName($product).trim().replace(/"|&quote;/g, "-inch").replace("&amp;", "&").replace(/\"/g, '');
      productObj.id = listObj.sku($product).toString();
      productObj.price = listObj.price($product);
      return productObj;
    },

    pushProductImpressions: function(prodArray) {
      dataLayer.push({
        'event': "productImpressions",
        'ecommerce': {
          'currencyCode': "USD",
          'impressions': prodArray,
        }
      });
    },

    pushProductClick: function(prodObj) {
      dataLayer.push({
        'event': "productClick",
        'ecommerce': {
          'click': {
            'actionField': {
              'list': prodObj.list,
            },
            'products': [prodObj],
          }
        },
      });

    },

    pushProductAdd: function(prodObj) {
      dataLayer.push({
        'event': "addToCart",
        'ecommerce': {
          'add': {
            'actionField': {
              'list': prodObj.list,
            },
            'products': [prodObj],
          }
        },
      });
    },

    listData: {
      'blog-recs': {
        'listname': 'Ltk Rec - blog post page',
        'wrapper': '#block-kafblogrecommendedproducts',
        'entry': '#block-kafblogrecommendedproducts .product--listrak',
        'clickTarget': '#block-kafblogrecommendedproducts .product--listrak a:not(.btn)',
        'addTarget': '#block-kafblogrecommendedproducts .product--listrak .btn',
        'sku': function($product) { return $product.find('a').data('sku'); },
        'prodName': function($product) { return $product.find('.figcaption').text(); },
        'price': function($product) { return $product.find('.orig-price').text().trim().substr(1); },
      },
      'search-results': {
        'listname': 'Search Results Page',
        'identifier': '#block-kafalgoliasearchresults',
        'wrapper': '#algolia_results #Product .hits',
        'entry': '#algolia_results #Product .hits .grid__item',
        'offset': function($product) {
          var pages = parseInt($('#Product .ais-Pagination-item--selected').text()) - 1;
          var count = parseInt($('#Product .ais-HitsPerPage-select').val());
          return pages * count;
        },
        'clickTarget': '#algolia_results #Product .hits .grid__item a:not(.button)',
        'addTarget': '#algolia_results #Product .hits .grid__item .button',
        'sku': function($product) { return $product.find('.product-result-sku').text().substr(1); },
        'prodName': function($product) { return $product.find('.product-result-title').text(); },
        'price': function($product) {
          var price = $product.find('.special-price').length ? $product.find('.special-price') : $product.find('.current-price');
          return price.text().trim().substr(1);
        },
        'ajaxMultipage': true,
        'paginationTarget': '#Product .pagination li:not(.ais-Pagination-item--selected)',
      },
      'recipe-related': {
        'listname': 'Related Products - recipe detail page',
        'wrapper': '#block-kafreciperelatedproducts',
        'entry': '#block-kafreciperelatedproducts .product',
        'clickTarget': '#block-kafreciperelatedproducts .product a',
        'sku': function($product) { return $product.find('h5').data('sku'); },
        'prodName': function($product) { return $product.find('h5').text(); },
        'price': function($product) { return $product.find('h5').data('price').substr(1); },
      },
      'recipe-ingredients': {
        'listname': 'Linked Ingredients - recipe page',
        'wrapper': '.recipe__ingredients',
        'entry': '.recipe__ingredients li a',
        'offset': function($product) {
          // Inexact when two linked products share a line, but close enough.
          return $('.ingredient-section li').index($($product).closest('li'));
        },
        'clickTarget': '.recipe__ingredients li a',
        'sku': function($product) { return $product.data('sku'); },
        'prodName': function($product) { return $product.data('name'); },
        'price': function($product) { return $product.data('price').substr(1); },
      },

      // 'list-key': {
      //   'listname': 'str', // displayed in GA
      //   'identifier': 'sel', // determines whether list is on page; optional, uses wrapper otherwise
      //   'wrapper': 'sel', // determines whether list is in view
      //   'entry': 'sel', // product container whose index is usable for position
      //   'offset': 'int', // for position; optional, uses 0 if not set
      //   'clickTarget': 'sel', // for click handler
      //   'addTarget': 'sel', // ditto; optional
      //   'sku': 'fn', // functions take product jQuery object (entry), return string
      //   'prodName': 'fn', // is trimmed and standardized centrally
      //   'price': 'fn', // strip dollar sign here
      //   'ajaxMultipage': 'bool', // are new pages loaded by ajax?
      //   'paginationTarget': 'sel', // for click handler; required if ajaxMultipage = true
      // },
    },
  };

})(jQuery, Drupal);
